{"version":3,"file":"MediaConnectionBitrateTest.js","sourceRoot":"","sources":["../../../tests/integration/MediaConnectionBitrateTest.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable only-arrow-functions */\n\nimport * as assert from 'assert';\nimport * as fs from 'fs';\nimport * as request from 'request';\nimport * as sinon from 'sinon';\n\nimport {\n  MediaConnectionBitrateTest,\n  testMediaConnectionBitrate,\n} from '../../lib/MediaConnectionBitrateTest';\n\nconst defaultTestDuration = 500;\n\nconst creds: any = {\n  accountSid: (window as any).__env__.ACCOUNTSID,\n  authToken: (window as any).__env__.AUTHTOKEN,\n};\n\nif (!creds.accountSid || !creds.authToken) {\n  throw new Error('Missing credentials. Please use credentials.json or environment variables ACCOUNTSID and AUTHTOKEN.');\n}\n\nfunction getTurnCreds() {\n  return new Promise(resolve => {\n    request.post(`https://api.twilio.com/2010-04-01/Accounts/${creds.accountSid}/Tokens.json`, {\n      auth: {\n        pass: creds.authToken,\n        user: creds.accountSid,\n      },\n    }, (e, r, body) => resolve(JSON.parse(body)));\n  });\n}\n\ndescribe('testMediaConnectionBitrate', function() {\n  this.timeout(10000);\n  let errorHandler: sinon.SinonSpy;\n  let endHandler: sinon.SinonSpy;\n\n  beforeEach(function(done: any) {\n    errorHandler = sinon.spy();\n    endHandler = sinon.spy();\n\n    getTurnCreds().then(function(res: any) {\n      const iceServers = res.ice_servers;\n      const test = testMediaConnectionBitrate({ iceServers });\n      setTimeout(() => { test.stop(); });\n      test.on(MediaConnectionBitrateTest.Events.Error, errorHandler);\n      test.on(MediaConnectionBitrateTest.Events.End, r => {\n        endHandler(r);\n        setTimeout(() => done(), defaultTestDuration);\n      });\n    });\n  });\n\n  it('should have not called the error handler', function() {\n    assert(!errorHandler.called);\n  });\n\n  it('should have called the end handler once', function() {\n    assert.equal(endHandler.callCount, 1);\n  });\n\n  it('should have generated a valid report', function() {\n    const report: MediaConnectionBitrateTest.Report = endHandler.args[0][0];\n    assert(report);\n\n    assert('averageBitrate' in report);\n    assert('errors' in report);\n    assert.equal(report.errors.length, 0);\n    assert('iceCandidateStats' in report);\n    assert('start' in report.testTiming!);\n    assert('end' in report.testTiming!);\n    assert('testName' in report);\n    assert(report.testName === MediaConnectionBitrateTest.testName);\n    assert('values' in report);\n  });\n\n  it('should not contain any errors', function() {\n    const report: MediaConnectionBitrateTest.Report = endHandler.args[0][0];\n    assert(report);\n\n    assert('errors' in report);\n    assert.equal(report.errors.length, 0);\n  });\n});\n"]}