{"version":3,"file":"VideoInputTest.js","sourceRoot":"","sources":["../../../tests/integration/VideoInputTest.ts"],"names":[],"mappings":";AAAA,yCAAyC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEzC,+BAAiC;AACjC,6BAA+B;AAE/B,2DAGkC;AAElC,IAAM,mBAAmB,GAAG,GAAG,CAAC;AAEhC,QAAQ,CAAC,sBAAsB,EAAE;IAC/B,IAAI,YAA4B,CAAC;IACjC,IAAI,UAA0B,CAAC;IAE/B,UAAU,CAAC;;;;;wBACT,YAAY,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC;wBAC3B,UAAU,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC;wBAEzB,qBAAM,IAAI,OAAO,CAAC,UAAA,OAAO;gCACvB,IAAM,IAAI,GAAG,qCAAoB,CAAC;oCAChC,QAAQ,EAAE,mBAAmB;iCAC9B,CAAC,CAAC;gCACH,IAAI,CAAC,EAAE,CAAC,+BAAc,CAAC,MAAM,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;gCACnD,IAAI,CAAC,EAAE,CAAC,+BAAc,CAAC,MAAM,CAAC,GAAG,EAAE,UAAC,CAAC;oCACnC,UAAU,CAAC,CAAC,CAAC,CAAC;oCACd,uEAAuE;oCACvE,iCAAiC;oCACjC,UAAU,CAAC,cAAM,OAAA,OAAO,EAAE,EAAT,CAAS,EAAE,mBAAmB,CAAC,CAAC;gCACnD,CAAC,CAAC,CAAC;4BACL,CAAC,CAAC,EAAA;;wBAXF,SAWE,CAAC;;;;;KACJ,CAAC,CAAC;IAEH,EAAE,CAAC,0CAA0C,EAAE;QAC7C,MAAM,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;IAC/B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yCAAyC,EAAE;QAC5C,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;IACxC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sCAAsC,EAAE;QACzC,IAAM,MAAM,GAA0B,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5D,MAAM,CAAC,MAAM,CAAC,CAAC;QAEf,MAAM,CAAC,UAAU,IAAI,MAAM,CAAC,CAAC;QAC7B,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,CAAC;QAC3B,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACtC,MAAM,CAAC,YAAY,IAAI,MAAM,CAAC,CAAC;QAC/B,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,UAAW,CAAC,CAAC;QACtC,MAAM,CAAC,KAAK,IAAI,MAAM,CAAC,UAAW,CAAC,CAAC;QACpC,MAAM,CAAC,UAAU,IAAI,MAAM,CAAC,CAAC;QAC7B,MAAM,CAAC,MAAM,CAAC,QAAQ,KAAK,+BAAc,CAAC,QAAQ,CAAC,CAAC;QACpD,MAAM,CAAC,YAAY,IAAI,MAAM,CAAC,CAAC;IACjC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+BAA+B,EAAE;QAClC,IAAM,MAAM,GAA0B,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5D,MAAM,CAAC,MAAM,CAAC,CAAC;QAEf,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,CAAC;QAC3B,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IACxC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/* tslint:disable only-arrow-functions */\n\nimport * as assert from 'assert';\nimport * as sinon from 'sinon';\n\nimport {\n  testVideoInputDevice,\n  VideoInputTest,\n} from '../../lib/VideoInputTest';\n\nconst defaultTestDuration = 500;\n\ndescribe('testVideoInputDevice', function() {\n  let errorHandler: sinon.SinonSpy;\n  let endHandler: sinon.SinonSpy;\n\n  beforeEach(async function() {\n    errorHandler = sinon.spy();\n    endHandler = sinon.spy();\n\n    await new Promise(resolve => {\n      const test = testVideoInputDevice({\n        duration: defaultTestDuration,\n      });\n      test.on(VideoInputTest.Events.Error, errorHandler);\n      test.on(VideoInputTest.Events.End, (r) => {\n        endHandler(r);\n        // we want to wait before resolving so we can detect if the end handler\n        // has been called multiple times\n        setTimeout(() => resolve(), defaultTestDuration);\n      });\n    });\n  });\n\n  it('should have not called the error handler', function() {\n    assert(!errorHandler.called);\n  });\n\n  it('should have called the end handler once', function() {\n    assert.equal(endHandler.callCount, 1);\n  });\n\n  it('should have generated a valid report', function() {\n    const report: VideoInputTest.Report = endHandler.args[0][0];\n    assert(report);\n\n    assert('deviceId' in report);\n    assert('errors' in report);\n    assert.equal(report.errors.length, 0);\n    assert('testTiming' in report);\n    assert('start' in report.testTiming!);\n    assert('end' in report.testTiming!);\n    assert('testName' in report);\n    assert(report.testName === VideoInputTest.testName);\n    assert('resolution' in report);\n  });\n\n  it('should not contain any errors', function() {\n    const report: VideoInputTest.Report = endHandler.args[0][0];\n    assert(report);\n\n    assert('errors' in report);\n    assert.equal(report.errors.length, 0);\n  });\n});\n"]}