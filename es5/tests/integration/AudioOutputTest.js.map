{"version":3,"file":"AudioOutputTest.js","sourceRoot":"","sources":["../../../tests/integration/AudioOutputTest.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable only-arrow-functions */\n\nimport * as assert from 'assert';\n\nimport {\n  AudioOutputTest,\n  testAudioOutputDevice,\n} from '../../lib/AudioOutputTest';\nimport {\n  INCOMING_SOUND_URL,\n} from '../../lib/constants';\n\nconst suiteTimeout = 10000;\nconst defaultTestDuration = 5000;\nconst defaultTestVolumeEventIntervalMs = 10;\n\ndescribe('testAudioOutputDevice', function() {\n  this.timeout(suiteTimeout);\n  describe('when not given a testURI', function() {\n    describe('when allowed to time out', function() {\n      let audioOutputTestReport: AudioOutputTest.Report;\n      const audioOutputTestEvents: AudioOutputTest.Events[] = [];\n\n      before(async function() {\n        audioOutputTestReport = await new Promise(resolve => {\n          const test = testAudioOutputDevice({\n            duration: defaultTestDuration,\n            volumeEventIntervalMs: defaultTestVolumeEventIntervalMs,\n          });\n          test.on(AudioOutputTest.Events.Volume, () => {\n            audioOutputTestEvents.push(AudioOutputTest.Events.Volume);\n          });\n          test.on(AudioOutputTest.Events.Error, () => {\n            audioOutputTestEvents.push(AudioOutputTest.Events.Error);\n          });\n          test.on(AudioOutputTest.Events.End, (report) => {\n            audioOutputTestEvents.push(AudioOutputTest.Events.End);\n            setTimeout(() => resolve(report), defaultTestVolumeEventIntervalMs * 3);\n          });\n        });\n      });\n\n      it('should end with an `end` event', function() {\n        assert.equal(\n          audioOutputTestEvents[audioOutputTestEvents.length - 1],\n          AudioOutputTest.Events.End,\n        );\n      });\n    });\n\n    describe('when stopped', function() {\n      let audioOutputTestReport: AudioOutputTest.Report;\n      const audioOutputTestEvents: AudioOutputTest.Events[] = [];\n\n      before(async function() {\n        audioOutputTestReport = await new Promise(resolve => {\n          let timeoutId: any;\n          const test = testAudioOutputDevice({\n            duration: Infinity,\n            volumeEventIntervalMs: defaultTestVolumeEventIntervalMs,\n          });\n          test.on(AudioOutputTest.Events.Volume, () => {\n            audioOutputTestEvents.push(AudioOutputTest.Events.Volume);\n          });\n          test.on(AudioOutputTest.Events.End, (report) => {\n            audioOutputTestEvents.push(AudioOutputTest.Events.End);\n            clearTimeout(timeoutId);\n            setTimeout(() => resolve(report), defaultTestVolumeEventIntervalMs * 3);\n          });\n          timeoutId = setTimeout(() => test.stop(), defaultTestDuration);\n        });\n      });\n\n      it('should have some amount of `volume` events', function() {\n        assert(\n          audioOutputTestEvents.filter(e => e === AudioOutputTest.Events.Volume).length\n            > 0,\n        );\n      });\n\n      it('should end with an `end` event', function() {\n        assert.equal(\n          audioOutputTestEvents[audioOutputTestEvents.length - 1],\n          AudioOutputTest.Events.End,\n        );\n      });\n\n      it('should not have more than 1 `end` event', function() {\n        assert.equal(\n          audioOutputTestEvents.filter(e => e === AudioOutputTest.Events.End).length,\n          1,\n        );\n      });\n    });\n  });\n\n  describe('when given a valid `testURI`', function() {\n    let audioOutputTestReport: AudioOutputTest.Report;\n    const audioOutputTestEvents: AudioOutputTest.Events[] = [];\n\n    before(async function() {\n      audioOutputTestReport = await new Promise(resolve => {\n        let timeoutId: any;\n        const test = testAudioOutputDevice({\n          duration: Infinity,\n          testURI: INCOMING_SOUND_URL,\n          volumeEventIntervalMs: defaultTestVolumeEventIntervalMs,\n        });\n        test.on(AudioOutputTest.Events.Volume, () => {\n          audioOutputTestEvents.push(AudioOutputTest.Events.Volume);\n        });\n        test.on(AudioOutputTest.Events.End, (report) => {\n          audioOutputTestEvents.push(AudioOutputTest.Events.End);\n          clearTimeout(timeoutId);\n          setTimeout(() => resolve(report), defaultTestVolumeEventIntervalMs * 3);\n        });\n        test.on(AudioOutputTest.Events.Error, () => {\n          audioOutputTestEvents.push(AudioOutputTest.Events.Error);\n        });\n        timeoutId = setTimeout(() => test.stop(), defaultTestDuration);\n      });\n    });\n\n    it('should not have any errors', function() {\n      assert.equal(audioOutputTestReport.errors.length, 0);\n    });\n  });\n\n  describe('when given an invalid `testURI`', function() {\n    let audioOutputTestReport: AudioOutputTest.Report;\n    const audioOutputTestEvents: AudioOutputTest.Events[] = [];\n\n    before(async function() {\n      audioOutputTestReport = await new Promise(resolve => {\n        const test = testAudioOutputDevice({\n          duration: Infinity,\n          testURI: '',\n          volumeEventIntervalMs: defaultTestVolumeEventIntervalMs,\n        });\n        test.on(AudioOutputTest.Events.Volume, () => {\n          audioOutputTestEvents.push(AudioOutputTest.Events.Volume);\n        });\n        test.on(AudioOutputTest.Events.End, (report) => {\n          audioOutputTestEvents.push(AudioOutputTest.Events.End);\n          setTimeout(() => resolve(report), defaultTestVolumeEventIntervalMs * 3);\n        });\n        test.on(AudioOutputTest.Events.Error, () => {\n          audioOutputTestEvents.push(AudioOutputTest.Events.Error);\n        });\n      });\n    });\n\n    it('should not have a \"no supported source was found\" error', function() {\n      assert.equal(audioOutputTestReport.errors.length, 1);\n      const error = audioOutputTestReport.errors[0].domError;\n      assert(error);\n      assert.equal(error!.name, 'NotSupportedError');\n    });\n  });\n});\n"]}