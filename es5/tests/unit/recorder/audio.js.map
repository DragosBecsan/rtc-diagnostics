{"version":3,"file":"audio.js","sourceRoot":"","sources":["../../../../tests/unit/recorder/audio.ts"],"names":[],"mappings":";AAAA,sCAAsC;;AAEtC,+BAAiC;AACjC,6BAA+B;AAC/B,qDAA4D;AAE5D,QAAQ,CAAC,eAAe,EAAE;IACxB,IAAM,IAAI,GAAQ,MAAM,CAAC;IACzB,IAAI,aAA4B,CAAC;IACjC,IAAI,YAAiB,CAAC;IACtB,IAAI,qBAA0B,CAAC;IAC/B,IAAI,YAAiB,CAAC;IACtB,IAAI,MAAW,CAAC;IAChB,IAAI,iBAAsB,CAAC;IAC3B,IAAI,iBAAsB,CAAC;IAC3B,IAAI,oBAAyB,CAAC;IAC9B,IAAI,QAAa,CAAC;IAClB,IAAI,OAAY,CAAC;IAEjB,UAAU,CAAC;QACT,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC;QACrB,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC;QAEnB,IAAI,CAAC,IAAI,GAAG,UAAoB,SAAgB,EAAE,OAAY;YAC5D,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;YAC3B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;YACvB,YAAY,GAAG,IAAI,CAAC;QACtB,CAAC,CAAC;QACF,IAAI,CAAC,GAAG,GAAG,EAAC,eAAe,EAAE,UAAC,IAAS,IAAK,OAAA,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,EAArB,CAAqB,EAAC,CAAC;QAEnE,YAAY,GAAG,EAAE,CAAC;QAClB,iBAAiB,GAAG,EAAC,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE,EAAC,CAAC;QACzC,iBAAiB,GAAG,EAAC,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE,EAAC,CAAC;QACzC,MAAM,GAAG;YACP,KAAK,EAAE,KAAK,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC;gBAC1B,SAAS,EAAE,cAAM,OAAA,CAAC;oBAChB,iBAAiB;oBACjB,iBAAiB;iBAClB,CAAC,EAHe,CAGf;aACH,CAAC;SACH,CAAC;QACF,oBAAoB,GAAG;YAAA,iBAMtB;YALC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC;YAC1B,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC,SAAS,CAAC;gBACjC,KAAI,CAAC,MAAM,EAAE,CAAC;YAChB,CAAC,CAAC,CAAC;YACH,qBAAqB,GAAG,IAAI,CAAC;QAC/B,CAAC,CAAC;QACF,aAAa,GAAG,IAAI,qBAAa,CAAC,EAAE,MAAM,QAAA,EAAE,oBAAoB,sBAAA,EAAE,YAAY,cAAA,EAAE,CAAC,CAAC;IACpF,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC;QACR,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC;QACrB,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC;IACrB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uCAAuC,EAAE;QAC1C,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACxC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8BAA8B,EAAE;QACjC,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;IACvD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gDAAgD,EAAE;QACnD,MAAM,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC,CAAC;QAC7B,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC,CAAC;IACvC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uCAAuC,EAAE;QAC1C,IAAI,CAAC,IAAI,GAAG;YACV,MAAM,IAAI,KAAK,CAAC,SAAS,CAAC,CAAC;QAC7B,CAAC,CAAC;QACF,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC,CAAC;IACvC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4BAA4B,EAAE;QAC/B,aAAa,CAAC,IAAI,EAAE,CAAC;QACrB,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC;IACtD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uCAAuC,EAAE;QAC1C,aAAa,CAAC,IAAI,EAAE,CAAC;QACrB,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;QAChD,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oCAAoC,EAAE;QACvC,qBAAqB,CAAC,eAAe,CAAC,EAAC,IAAI,EAAE,KAAK,EAAC,CAAC,CAAC;QACrD,qBAAqB,CAAC,eAAe,CAAC,EAAC,IAAI,EAAE,KAAK,EAAC,CAAC,CAAC;QACrD,qBAAqB,CAAC,eAAe,CAAC,EAAC,IAAI,EAAE,KAAK,EAAC,CAAC,CAAC;QACrD,aAAa,CAAC,IAAI,EAAE,CAAC;QACrB,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;IAEH,CAAE,WAAW,EAAE,YAAY,EAAE,SAAS,CAAE,CAAC,OAAO,CAAC,UAAA,QAAQ;QACvD,oBAAoB,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzC,EAAE,CAAC,wCAAwC,EAAE;YAC3C,aAAa,CAAC,IAAI,EAAE,CAAC;YACrB,IAAI,QAAQ,EAAE;gBACZ,MAAM,CAAC,KAAK,CAAC,qBAAqB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;aACxD;iBAAM;gBACL,MAAM,CAAC,KAAK,CAAC,qBAAqB,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;aAC3D;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// tslint:disable only-arrow-functions\n\nimport * as assert from 'assert';\nimport * as sinon from 'sinon';\nimport { AudioRecorder } from '../../../lib/recorder/audio';\n\ndescribe('AudioRecorder', () => {\n  const root: any = global;\n  let audioRecorder: AudioRecorder;\n  let audioContext: any;\n  let mediaRecorderInstance: any;\n  let blobInstance: any;\n  let stream: any;\n  let mediaStreamTrack1: any;\n  let mediaStreamTrack2: any;\n  let MediaRecorderFactory: any;\n  let origBlob: any;\n  let origURL: any;\n\n  beforeEach(() => {\n    origBlob = root.Blob;\n    origURL = root.URL;\n\n    root.Blob = function(this: any, audioData: any[], options: any) {\n      this.audioData = audioData;\n      this.options = options;\n      blobInstance = this;\n    };\n    root.URL = {createObjectURL: (blob: any) => blob.audioData.join()};\n\n    audioContext = {};\n    mediaStreamTrack1 = {stop: sinon.stub()};\n    mediaStreamTrack2 = {stop: sinon.stub()};\n    stream = {\n      clone: sinon.stub().returns({\n        getTracks: () => ([\n          mediaStreamTrack1,\n          mediaStreamTrack2,\n        ]),\n      }),\n    };\n    MediaRecorderFactory = function(this: any) {\n      this.start = sinon.stub();\n      this.stop = sinon.stub().callsFake(() => {\n        this.onstop();\n      });\n      mediaRecorderInstance = this;\n    };\n    audioRecorder = new AudioRecorder({ stream, MediaRecorderFactory, audioContext });\n  });\n\n  afterEach(() => {\n    root.Blob = origBlob;\n    root.URL = origURL;\n  });\n\n  it('should use a clone of the MediaStream', () => {\n    sinon.assert.calledOnce(stream.clone);\n  });\n\n  it('should start recording media', () => {\n    sinon.assert.calledOnce(mediaRecorderInstance.start);\n  });\n\n  it('should reject if stop is called more than once', () => {\n    assert(audioRecorder.stop());\n    assert.rejects(audioRecorder.stop());\n  });\n\n  it('should reject if generating url fails', () => {\n    root.Blob = function() {\n      throw new Error('foo err');\n    };\n    assert.rejects(audioRecorder.stop());\n  });\n\n  it('should stop media recorder', () => {\n    audioRecorder.stop();\n    sinon.assert.calledOnce(mediaRecorderInstance.stop);\n  });\n\n  it('should stop MediaStreamTracks on stop', () => {\n    audioRecorder.stop();\n    sinon.assert.calledOnce(mediaStreamTrack1.stop);\n    sinon.assert.calledOnce(mediaStreamTrack2.stop);\n  });\n\n  it('should generate url from audioData', () => {\n    mediaRecorderInstance.ondataavailable({data: 'foo'});\n    mediaRecorderInstance.ondataavailable({data: 'bar'});\n    mediaRecorderInstance.ondataavailable({data: 'baz'});\n    audioRecorder.stop();\n    assert.equal(audioRecorder.url, 'foo,bar,baz');\n  });\n\n  [ 'audio/mp4', 'audio/webm', undefined ].forEach(mimeType => {\n    MediaRecorderFactory.mimeType = mimeType;\n    it('should use mime type chosen by browser', () => {\n      audioRecorder.stop();\n      if (mimeType) {\n        assert.equal(mediaRecorderInstance.mimeType, mimeType);\n      } else {\n        assert.equal(mediaRecorderInstance.mimeType, 'audio/wav');\n      }\n    });\n  });\n});\n"]}