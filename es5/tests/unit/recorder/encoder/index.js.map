{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../tests/unit/recorder/encoder/index.ts"],"names":[],"mappings":"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","sourcesContent":["// tslint:disable only-arrow-functions\n\nimport * as sinon from 'sinon';\nimport { Encoder } from '../../../../lib/recorder/encoder';\n\ndescribe('Audio Encoder', () => {\n  const root: any = global;\n  const stream: any = {};\n  const waveEncoder: any = {};\n\n  let audioContext: any;\n  let processor: any;\n  let audioEncoder: any;\n  let workerInstance: any;\n  let origWorker: any;\n  let origBlob: any;\n  let origURL: any;\n\n  beforeEach(() => {\n    origBlob = root.Blob;\n    origURL = root.URL;\n    origWorker = root.Worker;\n    root.URL = {createObjectURL: () => undefined};\n    root.Blob = function() {\n      return undefined;\n    };\n\n    root.Worker = function() {\n      this.data = [];\n      this.addEventListener = (name: string, cb: Function) => {\n        this.onMessageHandler = cb;\n      };\n      this.postMessage = (args: any[]) => {\n        const command = args[0];\n        if (command === 'encode') {\n          this.data.push(args[1]);\n        } else if (command === 'dump') {\n          this.onMessageHandler(this.data.join());\n        }\n      };\n      workerInstance = this;\n    };\n\n    processor = {connect: () => undefined};\n    audioContext = {\n      createMediaStreamSource: () => ({connect: () => undefined}),\n      createScriptProcessor: () => processor,\n    };\n\n    audioEncoder = new Encoder(stream, audioContext, waveEncoder);\n  });\n\n  afterEach(() => {\n    root.Worker = origWorker;\n    root.Blob = origBlob;\n    root.URL = origURL;\n  });\n\n  it('should not crash if a customer encoder is not provided', () => {\n    audioEncoder = new Encoder(stream, audioContext);\n  });\n\n  describe('without handlers', () => {\n    it('should not crash if onstop and ondataavailable are not provided', () => {\n      audioEncoder.start();\n      processor.onaudioprocess({inputBuffer: {getChannelData: () => 'foo'}});\n      audioEncoder.stop();\n    });\n  });\n\n  describe('with handlers', () => {\n    beforeEach(() => {\n      audioEncoder.ondataavailable = sinon.stub();\n      audioEncoder.onstop = sinon.stub();\n    });\n\n    it('should call ondataavailable handler', () => {\n      audioEncoder.start();\n      processor.onaudioprocess({inputBuffer: {getChannelData: () => 'foo'}});\n      processor.onaudioprocess({inputBuffer: {getChannelData: () => 'bar'}});\n      processor.onaudioprocess({inputBuffer: {getChannelData: () => 'baz'}});\n      audioEncoder.stop();\n      sinon.assert.calledWithExactly(audioEncoder.ondataavailable, 'foo,bar,baz');\n    });\n\n    it('should call onstop handler', () => {\n      audioEncoder.start();\n      processor.onaudioprocess({inputBuffer: {getChannelData: () => 'foo'}});\n      audioEncoder.stop();\n      sinon.assert.calledOnce(audioEncoder.onstop);\n    });\n  });\n});\n"]}