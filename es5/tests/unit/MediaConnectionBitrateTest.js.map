{"version":3,"file":"MediaConnectionBitrateTest.js","sourceRoot":"","sources":["../../../tests/unit/MediaConnectionBitrateTest.ts"],"names":[],"mappings":"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","sourcesContent":["import * as assert from 'assert';\nimport { EventEmitter } from 'events';\nimport * as sinon from 'sinon';\nimport { SinonFakeTimers } from 'sinon';\nimport { ErrorName, WarningName } from '../../lib/constants';\nimport { DiagnosticError } from '../../lib/errors/DiagnosticError';\nimport { MediaConnectionBitrateTest, testMediaConnectionBitrate } from '../../lib/MediaConnectionBitrateTest';\n\ndescribe('MediaConnectionBitrateTest', () => {\n  const root = (global as any);\n  const iceServers = [{\n    credential: 'bar',\n    url: 'turn:global.turn.twilio.com:3478?transport=udp',\n    urls: 'turn:global.turn.twilio.com:3478?transport=udp',\n    username: 'foo',\n  }];\n\n  let mediaConnectionBitrateTest: MediaConnectionBitrateTest;\n  let originalRTCPeerConnection: any;\n  let options: any;\n  let pcReceiverContext: any;\n  let pcSenderContext: any;\n  let rtcDataChannel: any;\n\n  let pcCreationCount = 0;\n\n  const expectEvent = (eventName: string, emitter: EventEmitter) => {\n    return new Promise((resolve) => emitter.once(eventName, (res) => resolve(res)));\n  };\n\n  const getPeerConnectionFactory = (): any => {\n    return function(this: any, rtcConfiguration: RTCConfiguration) {\n      this.rtcConfiguration = rtcConfiguration;\n      this.close = sinon.stub();\n      this.setLocalDescription = sinon.stub();\n      this.setRemoteDescription = sinon.stub();\n      this.createAnswer = sinon.stub().returns(Promise.resolve());\n      this.createOffer = sinon.stub().returns(Promise.resolve());\n      this.addIceCandidate = sinon.stub().returns({catch: sinon.stub()});\n      this.createDataChannel = sinon.stub().returns(rtcDataChannel);\n\n      // The tests always uses 2 PeerConnections\n      // The first one is always the receiver\n      // Let's capture them for mocking\n      pcCreationCount++;\n      if (pcCreationCount % 2 === 1) {\n        pcReceiverContext = this;\n      } else {\n        pcSenderContext = this;\n      }\n    };\n  };\n\n  beforeEach(() => {\n    options = {\n      getRTCIceCandidateStatsReport: sinon.stub()\n        .resolves({\n          iceCandidateStats: [],\n        }),\n      iceServers,\n    };\n\n    rtcDataChannel = {\n      send: sinon.stub(),\n    };\n\n    originalRTCPeerConnection = root.RTCPeerConnection;\n    root.RTCPeerConnection = getPeerConnectionFactory();\n  });\n\n  afterEach(() => {\n    pcReceiverContext = null;\n    pcSenderContext = null;\n    root.RTCPeerConnection = originalRTCPeerConnection;\n    if (mediaConnectionBitrateTest) {\n      mediaConnectionBitrateTest.stop();\n    }\n  });\n\n  describe('testMediaConnectionBitrate', () => {\n    it('should return MediaConnectionBitrateTest instance', () => {\n      mediaConnectionBitrateTest = testMediaConnectionBitrate(options);\n      assert(!!mediaConnectionBitrateTest);\n    });\n  });\n\n  describe('constructor', () => {\n    it('should use iceServers option', () => {\n      mediaConnectionBitrateTest = new MediaConnectionBitrateTest(options);\n      assert.deepEqual(pcReceiverContext.rtcConfiguration.iceServers, iceServers);\n      assert.deepEqual(pcSenderContext.rtcConfiguration.iceServers, iceServers);\n    });\n\n    it('should use relay on the receiving peer connection', () => {\n      mediaConnectionBitrateTest = new MediaConnectionBitrateTest(options);\n      assert.equal(pcReceiverContext.rtcConfiguration.iceTransportPolicy, 'relay');\n    });\n\n    it('should not use relay on the sending peer connection', () => {\n      mediaConnectionBitrateTest = new MediaConnectionBitrateTest(options);\n      assert.equal(pcSenderContext.rtcConfiguration.iceTransportPolicy, undefined);\n    });\n  });\n\n  describe('onicecandidate', () => {\n    const candidateRelay = 'candidate:1 1 udp 22 1.2.3.4 44 typ relay raddr 1.2.3.4 rport 55 generation 0 ufrag UqY3 network-id 2';\n    const candidateHost = 'candidate:1 1 tcp 22 1.2.3.4 9 typ host tcptype active generation 0 ufrag ARCY network-id 3';\n\n    let event: any;\n\n    beforeEach(() => {\n      event = {\n        candidate: {\n          candidate: candidateRelay,\n        },\n      };\n      mediaConnectionBitrateTest = new MediaConnectionBitrateTest(options);\n    });\n\n    context('receiver pc', () => {\n      it('should add ICE candidate to remote pc', () => {\n        pcReceiverContext.onicecandidate(event);\n        sinon.assert.calledWithExactly(pcSenderContext.addIceCandidate, event.candidate);\n      });\n\n      it('should not add ICE candidate if candidate event is empty', () => {\n        pcReceiverContext.onicecandidate({});\n        sinon.assert.notCalled(pcSenderContext.addIceCandidate);\n      });\n\n      it('should emit error on addIceCandidate failure', () => {\n        pcSenderContext.addIceCandidate = () => ({\n          catch: (cb: Function) => {\n            cb('foo');\n          },\n        });\n\n        setTimeout(() => pcReceiverContext.onicecandidate(event));\n\n        return expectEvent('error', mediaConnectionBitrateTest).then((result: any) => {\n          assert.equal(result.domError, 'foo');\n        });\n      });\n    });\n\n    context('sender pc', () => {\n      it('should add ICE candidate to remote pc', () => {\n        pcSenderContext.onicecandidate(event);\n        sinon.assert.calledWithExactly(pcReceiverContext.addIceCandidate, event.candidate);\n      });\n\n      it('should not add ICE candidate if candidate event is empty', () => {\n        pcSenderContext.onicecandidate({});\n        sinon.assert.notCalled(pcReceiverContext.addIceCandidate);\n      });\n\n      it('should emit error on addIceCandidate failure', () => {\n        pcReceiverContext.addIceCandidate = () => ({\n          catch: (cb: Function) => {\n            cb('foo');\n          },\n        });\n\n        setTimeout(() => pcSenderContext.onicecandidate(event));\n\n        return expectEvent('error', mediaConnectionBitrateTest).then((result: any) => {\n          assert.equal(result.domError, 'foo');\n        });\n      });\n    });\n  });\n\n  describe('setup RTCPeerConnections', () => {\n    const wait = () => new Promise(r => setTimeout(r, 1));\n\n    beforeEach(() => {\n      mediaConnectionBitrateTest = new MediaConnectionBitrateTest(options);\n      mediaConnectionBitrateTest.stop = sinon.spy(mediaConnectionBitrateTest.stop);\n    });\n\n    it('should throw error on createOffer failure', () => {\n      const callback = sinon.spy();\n      mediaConnectionBitrateTest.on(MediaConnectionBitrateTest.Events.Error, callback);\n      pcSenderContext.createOffer = () => Promise.reject('foo');\n\n      return wait().then(() => {\n        sinon.assert.calledWith(callback, sinon.match.has('domError', 'foo'));\n        sinon.assert.calledWith(callback, sinon.match.has('message', 'Unable to create offer'));\n        sinon.assert.called(mediaConnectionBitrateTest.stop as any);\n      });\n    });\n\n    it('should throw error on sender setLocalDescription failure', () => {\n      const callback = sinon.spy();\n      mediaConnectionBitrateTest.on(MediaConnectionBitrateTest.Events.Error, callback);\n      pcSenderContext.setLocalDescription = () => Promise.reject('foo');\n\n      return wait().then(() => {\n        sinon.assert.calledWith(callback, sinon.match.has('domError', 'foo'));\n        sinon.assert.calledWith(callback, sinon.match.has('message', 'Unable to set local or remote description from createOffer'));\n        sinon.assert.called(mediaConnectionBitrateTest.stop as any);\n      });\n    });\n\n    it('should throw error on receiver setRemoteDescription failure', () => {\n      const callback = sinon.spy();\n      mediaConnectionBitrateTest.on(MediaConnectionBitrateTest.Events.Error, callback);\n      pcReceiverContext.setRemoteDescription = () => Promise.reject('foo');\n\n      return wait().then(() => {\n        sinon.assert.calledWith(callback, sinon.match.has('domError', 'foo'));\n        sinon.assert.calledWith(callback, sinon.match.has('message', 'Unable to set local or remote description from createOffer'));\n        sinon.assert.called(mediaConnectionBitrateTest.stop as any);\n      });\n    });\n\n    it('should throw error on createAnswer failure', () => {\n      const callback = sinon.spy();\n      mediaConnectionBitrateTest.on(MediaConnectionBitrateTest.Events.Error, callback);\n      pcReceiverContext.createAnswer = () => Promise.reject('foo');\n\n      return wait().then(() => {\n        sinon.assert.calledWith(callback, sinon.match.has('domError', 'foo'));\n        sinon.assert.calledWith(callback, sinon.match.has('message', 'Unable to create answer'));\n        sinon.assert.called(mediaConnectionBitrateTest.stop as any);\n      });\n    });\n\n    it('should throw error on receiver setLocalDescription failure', () => {\n      const callback = sinon.spy();\n      mediaConnectionBitrateTest.on(MediaConnectionBitrateTest.Events.Error, callback);\n      pcReceiverContext.setLocalDescription = () => Promise.reject('foo');\n\n      return wait().then(() => {\n        sinon.assert.calledWith(callback, sinon.match.has('domError', 'foo'));\n        sinon.assert.calledWith(callback, sinon.match.has('message', 'Unable to set local or remote description from createAnswer'));\n        sinon.assert.called(mediaConnectionBitrateTest.stop as any);\n      });\n    });\n\n    it('should throw error on sender setRemoteDescription failure', () => {\n      const callback = sinon.spy();\n      mediaConnectionBitrateTest.on(MediaConnectionBitrateTest.Events.Error, callback);\n      pcSenderContext.setRemoteDescription = () => Promise.reject('foo');\n\n      return wait().then(() => {\n        sinon.assert.calledWith(callback, sinon.match.has('domError', 'foo'));\n        sinon.assert.calledWith(callback, sinon.match.has('message', 'Unable to set local or remote description from createAnswer'));\n        sinon.assert.called(mediaConnectionBitrateTest.stop as any);\n      });\n    });\n  });\n\n  describe('setup data channel', () => {\n    let clock: SinonFakeTimers;\n\n    beforeEach(() => {\n      clock = sinon.useFakeTimers(0);\n      mediaConnectionBitrateTest = new MediaConnectionBitrateTest(options);\n      mediaConnectionBitrateTest.stop = sinon.spy(mediaConnectionBitrateTest.stop);\n    });\n\n    afterEach(() => {\n      clock.restore();\n    });\n\n    it('should emit error on createDataChannel failure', (done) => {\n      pcSenderContext.createDataChannel = () => { throw new Error(); };\n      mediaConnectionBitrateTest.on(MediaConnectionBitrateTest.Events.Error, (error: DiagnosticError) => {\n        assert.equal(error.message, 'Error creating data channel');\n        sinon.assert.notCalled(mediaConnectionBitrateTest.stop as any);\n        done();\n      });\n      clock.tick(1);\n    });\n\n    describe('when the test times out', () => {\n      it('should emit an error and call stop', () => {\n        rtcDataChannel.readyState = 'open';\n\n        let errorName: string = '';\n        mediaConnectionBitrateTest.on(MediaConnectionBitrateTest.Events.Error, (error: DiagnosticError) => {\n          errorName = error.name;\n        });\n\n        clock.tick(15100);\n\n        sinon.assert.calledOnce(mediaConnectionBitrateTest.stop as any);\n        assert.equal(errorName, ErrorName.DiagnosticError);\n      });\n    });\n\n    describe('after creating successfully', () => {\n      describe('send message', () => {\n        beforeEach(() => {\n          clock.tick(1);\n          rtcDataChannel.readyState = 'open';\n        });\n\n        it('should not send data if rtcDataChannel is not open', () => {\n          rtcDataChannel.readyState = 'connecting';\n          rtcDataChannel.onopen();\n          clock.tick(1);\n\n          sinon.assert.notCalled(rtcDataChannel.send);\n        });\n\n        it('should not send data if max buffer is reached', () => {\n          rtcDataChannel.bufferedAmount = 999999;\n          rtcDataChannel.onopen();\n          clock.tick(1);\n\n          sinon.assert.notCalled(rtcDataChannel.send);\n        });\n\n        it('should send max data allowed', () => {\n          rtcDataChannel.onopen();\n          clock.tick(1);\n\n          sinon.assert.callCount(rtcDataChannel.send, 100);\n        });\n\n        it('should not send an empty packet', () => {\n          const data: string[] = [];\n          rtcDataChannel.send = (item: string) => data.push(item);\n          rtcDataChannel.onopen();\n          clock.tick(1);\n\n          assert(data.every((item: string) => item && item.length));\n        });\n      });\n\n      describe('on bitrate', () => {\n        const message = { data: Array(1024).fill('h').join('') };\n\n        let dataChannelEvent: any;\n        let sendMessage: Function;\n\n        const initBitrateTestObj = () => {\n          clock = sinon.useFakeTimers(0);\n          mediaConnectionBitrateTest = new MediaConnectionBitrateTest(options);\n          clock.tick(1);\n          dataChannelEvent = {\n            channel: {\n              onmessage: null, // Overridden\n            },\n          };\n          rtcDataChannel.onopen();\n          pcReceiverContext.ondatachannel(dataChannelEvent);\n          sendMessage = dataChannelEvent.channel.onmessage;\n        };\n\n        beforeEach(() => {\n          initBitrateTestObj();\n        });\n\n        afterEach(() => {\n          clock.restore();\n        });\n\n        it('should not emit bitrate if no sample data is available', () => {\n          const callback = sinon.stub();\n          mediaConnectionBitrateTest.on(MediaConnectionBitrateTest.Events.Bitrate, callback);\n\n          sendMessage(message);\n          clock.tick(1000);\n\n          sinon.assert.notCalled(callback);\n        });\n\n        it('should emit bitrate', () => {\n          const callback = sinon.stub();\n          mediaConnectionBitrateTest.on(MediaConnectionBitrateTest.Events.Bitrate, callback);\n\n          sendMessage(message);\n          clock.tick(1500);\n\n          sendMessage(message);\n          clock.tick(1200);\n\n          const expectedBitrate = 8 * ((message.data.length * 2) - message.data.length) / 1000;\n          sinon.assert.calledWithExactly(callback, expectedBitrate);\n        });\n\n        it('should stop emitting bitrate on stop', () => {\n          const callback = sinon.stub();\n          mediaConnectionBitrateTest.on(MediaConnectionBitrateTest.Events.Bitrate, callback);\n\n          sendMessage(message);\n          clock.tick(1200);\n\n          sendMessage(message);\n          clock.tick(1200);\n\n          mediaConnectionBitrateTest.stop();\n          sendMessage(message);\n          clock.tick(1200);\n\n          sinon.assert.calledOnce(callback);\n        });\n\n        it('should emit end event on stop', () => {\n          const callback = sinon.stub();\n          mediaConnectionBitrateTest.on(MediaConnectionBitrateTest.Events.End, callback);\n          sendMessage(message);\n          clock.tick(1200);\n          sendMessage(message);\n          clock.tick(1200);\n          sendMessage(message);\n          clock.tick(1200);\n\n          mediaConnectionBitrateTest.stop();\n          sinon.assert.calledOnce(callback);\n        });\n\n        it('should generate a report', (done) => {\n          const values: number[] = [];\n          mediaConnectionBitrateTest.on(MediaConnectionBitrateTest.Events.Bitrate, (bitrate: number) => values.push(bitrate));\n\n          mediaConnectionBitrateTest.on(MediaConnectionBitrateTest.Events.End, (report: MediaConnectionBitrateTest.Report) => {\n            assert.deepStrictEqual(report, {\n              averageBitrate: values.reduce((total: number, value: number) => total += value, 0) / values.length,\n              errors: [],\n              iceCandidateStats: [],\n              testName: 'media-connection-bitrate-test',\n              testTiming: {\n                duration: 3601,\n                end: 3601,\n                start: 0,\n              },\n              values,\n            });\n            done();\n          });\n\n          sendMessage(message);\n          clock.tick(1200);\n          sendMessage(message);\n          clock.tick(1200);\n          sendMessage(message);\n          clock.tick(1200);\n\n          mediaConnectionBitrateTest.stop();\n        });\n\n        it('should include errors in a report', (done) => {\n          pcSenderContext.addIceCandidate = () => ({\n            catch: (cb: Function) => {\n              cb('foo');\n            },\n          });\n          const errors: DiagnosticError[] = [];\n          mediaConnectionBitrateTest.on(MediaConnectionBitrateTest.Events.Error, (error: DiagnosticError) => errors.push(error));\n\n          mediaConnectionBitrateTest.on(MediaConnectionBitrateTest.Events.End, (report: MediaConnectionBitrateTest.Report) => {\n            assert.deepStrictEqual(report.errors, errors);\n            done();\n          });\n\n          sendMessage(message);\n          clock.tick(1200);\n          sendMessage(message);\n\n          pcReceiverContext.onicecandidate({\n            candidate: {\n              candidate: 'relay',\n            },\n          });\n\n          clock.tick(1200);\n          sendMessage(message);\n          clock.tick(1200);\n        });\n\n        describe('warnings', () => {\n          const populateBitrateValues = (values: number[]) => {\n            sendMessage(message);\n            clock.tick(1200);\n            sendMessage(message);\n            mediaConnectionBitrateTest['_values'] = values;\n            clock.tick(1200);\n          };\n\n          describe('when using minBitrateThreshold option', () => {\n            beforeEach(() => {\n              options.minBitrateThreshold = 500;\n              initBitrateTestObj();\n            });\n\n            it('should emit warnings', () => {\n              const callback = sinon.stub();\n              mediaConnectionBitrateTest.on(MediaConnectionBitrateTest.Events.Warning, callback);\n\n              populateBitrateValues([500, 500, 499, 499, 499]);\n              sinon.assert.calledWithExactly(callback, WarningName.LowBitrate);\n            });\n\n            it('should not emit warnings', () => {\n              const callback = sinon.stub();\n              mediaConnectionBitrateTest.on(MediaConnectionBitrateTest.Events.Warning, callback);\n\n              populateBitrateValues([500, 500, 500, 500, 500]);\n              sinon.assert.notCalled(callback);\n            });\n          });\n\n          describe('when using default threshold', () => {\n            [\n              [100, 100, 99, 99, 99],\n              [100, 99, 99, 100, 99],\n              [100, 100, 100, 99, 99, 99],\n            ].forEach(values => {\n              it(`should emit warning when values are ${values.join()}`, () => {\n                const callback = sinon.stub();\n                mediaConnectionBitrateTest.on(MediaConnectionBitrateTest.Events.Warning, callback);\n\n                populateBitrateValues(values);\n                sinon.assert.calledWithExactly(callback, WarningName.LowBitrate);\n              });\n            });\n\n            [\n              [100, 99, 99],\n              [100, 99, 99, 100, 100],\n              [99, 100, 100, 100, 99],\n              [100, 100, 100, 99, 99],\n            ].forEach(values => {\n              it(`should not emit warning when values are ${values.join()}`, () => {\n                const callback = sinon.stub();\n                mediaConnectionBitrateTest.on(MediaConnectionBitrateTest.Events.Warning, callback);\n\n                populateBitrateValues(values);\n                sinon.assert.notCalled(callback);\n              });\n            });\n\n            it('should not emit warning more than once', () => {\n              const callback = sinon.stub();\n              mediaConnectionBitrateTest.on(MediaConnectionBitrateTest.Events.Warning, callback);\n\n              populateBitrateValues([100, 100, 99, 99, 99]);\n              populateBitrateValues([99, 99, 99, 99, 99]);\n              sinon.assert.calledWithExactly(callback, WarningName.LowBitrate);\n              sinon.assert.calledOnce(callback);\n            });\n\n            it('should clear warning', () => {\n              const onWarning = sinon.stub();\n              const onWarningCleared = sinon.stub();\n              mediaConnectionBitrateTest.on(MediaConnectionBitrateTest.Events.Warning, onWarning);\n              mediaConnectionBitrateTest.on(MediaConnectionBitrateTest.Events.WarningCleared, onWarningCleared);\n\n              populateBitrateValues([100, 100, 99, 99, 99]);\n              populateBitrateValues([100, 100, 100, 100, 100]);\n              sinon.assert.calledWithExactly(onWarning, WarningName.LowBitrate);\n              sinon.assert.calledOnce(onWarning);\n              sinon.assert.calledWithExactly(onWarningCleared, WarningName.LowBitrate);\n              sinon.assert.calledOnce(onWarningCleared);\n            });\n\n            it('should not emit warning-cleared more than once', () => {\n              const onWarning = sinon.stub();\n              const onWarningCleared = sinon.stub();\n              mediaConnectionBitrateTest.on(MediaConnectionBitrateTest.Events.Warning, onWarning);\n              mediaConnectionBitrateTest.on(MediaConnectionBitrateTest.Events.WarningCleared, onWarningCleared);\n\n              populateBitrateValues([100, 100, 99, 99, 99]);\n              populateBitrateValues([100, 100, 100, 100, 100]);\n              populateBitrateValues([100, 100, 100, 100, 100]);\n              sinon.assert.calledWithExactly(onWarning, WarningName.LowBitrate);\n              sinon.assert.calledOnce(onWarning);\n              sinon.assert.calledWithExactly(onWarningCleared, WarningName.LowBitrate);\n              sinon.assert.calledOnce(onWarningCleared);\n            });\n          });\n        });\n\n        describe('ICE Candidate Stats', () => {\n          const runMediaConnectionBitrateTest = (shouldStop: boolean) => {\n            ['new', 'checking', 'connected', 'completed', 'disconnected', 'closed'].forEach(state => {\n              pcSenderContext.iceConnectionState = state;\n              pcSenderContext.oniceconnectionstatechange();\n              clock.tick(1000);\n            });\n\n            sendMessage(message);\n            clock.tick(1200);\n            sendMessage(message);\n\n            if (shouldStop) {\n              mediaConnectionBitrateTest.stop();\n            }\n          };\n\n          it('should include ICE Candidate stats in the report', (done) => {\n            mediaConnectionBitrateTest = new MediaConnectionBitrateTest({\n              ...options,\n              getRTCIceCandidateStatsReport: () => ({then: (cb: Function) => {\n                cb({\n                  iceCandidateStats: ['foo', 'bar'],\n                  selectedIceCandidatePairStats: {\n                    localCandidate: 'foo',\n                    remoteCandidate: 'bar',\n                  },\n                });\n                return {catch: sinon.stub()};\n              }}),\n            });\n\n            mediaConnectionBitrateTest.on(MediaConnectionBitrateTest.Events.End, (report: MediaConnectionBitrateTest.Report) => {\n              assert.deepStrictEqual(report.iceCandidateStats, ['foo', 'bar']);\n              assert.deepStrictEqual(report.selectedIceCandidatePairStats, {\n                localCandidate: 'foo',\n                remoteCandidate: 'bar',\n              });\n              done();\n            });\n\n            runMediaConnectionBitrateTest(true);\n          });\n\n          it('should not include selected ICE Candidate stats in the report if no candidates were selected', (done) => {\n            mediaConnectionBitrateTest = new MediaConnectionBitrateTest({\n              ...options,\n              getRTCIceCandidateStatsReport: () => ({then: (cb: Function) => {\n                cb({\n                  iceCandidateStats: ['foo', 'bar'],\n                });\n                return {catch: sinon.stub()};\n              }}),\n            });\n\n            mediaConnectionBitrateTest.on(MediaConnectionBitrateTest.Events.End, (report: MediaConnectionBitrateTest.Report) => {\n              assert.deepStrictEqual(report.iceCandidateStats, ['foo', 'bar']);\n              assert(!report.selectedIceCandidatePairStats);\n              done();\n            });\n\n            runMediaConnectionBitrateTest(true);\n          });\n\n          it('should fail the test if stats are not available', (done) => {\n            mediaConnectionBitrateTest = new MediaConnectionBitrateTest({\n              ...options,\n              getRTCIceCandidateStatsReport: () => ({then: () => {\n                return {catch: (cb: Function) => {\n                  cb('Foo error');\n                }};\n              }}),\n            });\n\n            const onError = sinon.stub();\n            mediaConnectionBitrateTest.on(MediaConnectionBitrateTest.Events.Error, onError);\n\n            mediaConnectionBitrateTest.on(MediaConnectionBitrateTest.Events.End, (report: MediaConnectionBitrateTest.Report) => {\n              sinon.assert.calledOnce(onError);\n              assert.equal(report.errors[0].domError, 'Foo error');\n              done();\n            });\n\n            runMediaConnectionBitrateTest(false);\n          });\n        });\n      });\n    });\n  });\n});\n"]}