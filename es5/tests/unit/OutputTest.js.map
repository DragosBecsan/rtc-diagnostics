{"version":3,"file":"OutputTest.js","sourceRoot":"","sources":["../../../tests/unit/OutputTest.ts"],"names":[],"mappings":";AAAA,sCAAsC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEtC,+BAAiC;AACjC,6BAA+B;AAC/B,iDAAgD;AAChD,oEAAmE;AACnE,mDAG8B;AAE9B,8DAAoE;AACpE,8DAAoE;AACpE,sEAA4E;AAE5E,IAAM,eAAe,GAAG,GAAG,CAAC;AAC5B,IAAM,4BAA4B,GAAG,CAAC,CAAC;AAEvC,QAAQ,CAAC,kBAAkB,EAAE;IAC3B,IAAM,mBAAmB,GAA6B,0CAAuB,CAAC;QAC5E,gBAAgB,EAAE,IAAI;KACvB,CAAQ,CAAC;IAEV,IAAM,YAAY,GAAG,GAAG,CAAC;IACzB,QAAQ,CAAC,2BAAyB,YAAc,EAAE;QAChD,IAAI,MAAyB,CAAC;QAE9B,MAAM,CAAC;;;;gCACI,qBAAM,IAAI,OAAO,CAAC,UAAA,OAAO;gCAChC,6BAAgB,CAAC;oCACf,mBAAmB,EAAE,0CAAuB,CAAC;wCAC3C,mBAAmB,EAAE,EAAE,YAAY,cAAA,EAAE;qCACtC,CAAQ;oCACT,mBAAmB,qBAAA;oCACnB,QAAQ,EAAE,eAAe;oCACzB,gBAAgB,EAAE,kDAA2B,CAAC;wCAC5C,OAAO,EAAE,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE,IAAI,EAAE,aAAa,EAAS,CAAC;qCAC/D,CAAC;oCACF,qBAAqB,EAAE,4BAA4B;iCACpD,CAAC,CAAC,EAAE,CAAC,uBAAU,CAAC,MAAM,CAAC,GAAG,EAAE,UAAC,CAAC,IAAK,OAAA,OAAO,CAAC,CAAC,CAAC,EAAV,CAAU,CAAC,CAAC;4BAClD,CAAC,CAAC,EAAA;;4BAZF,MAAM,GAAG,SAYP,CAAC;;;;;SACJ,CAAC,CAAC;QAEH,EAAE,CAAC,aAAa,EAAE;YAChB,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0BAA0B,EAAE;YAC7B,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;YAC1B,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;YACnC,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;YAC9B,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iCAA+B,YAAc,EAAE;YAChD,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,KAAK,YAAY,EAAlB,CAAkB,CAAC,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,yBAAyB,EAAE;QAClC,IAAI,MAAyB,CAAC;QAE9B,MAAM,CAAC;;;;;;4BACC,mBAAmB,GAAwB,0CAAuB,CAAC;gCACvE,mBAAmB,EAAE,EAAE,YAAY,EAAE,CAAC,EAAE;6BACzC,CAAQ,CAAC;4BAED,qBAAM,IAAI,OAAO,CAAC,UAAA,OAAO;oCAChC,6BAAgB,CAAC;wCACf,mBAAmB,qBAAA;wCACnB,mBAAmB,qBAAA;wCACnB,QAAQ,EAAE,eAAe;wCACzB,gBAAgB,EAAE,kDAA2B,CAAC;4CAC5C,OAAO,EAAE,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE,IAAI,EAAE,aAAa,EAAS,CAAC;yCAC/D,CAAC;wCACF,qBAAqB,EAAE,4BAA4B;qCACpD,CAAC,CAAC,EAAE,CAAC,uBAAU,CAAC,MAAM,CAAC,GAAG,EAAE,UAAC,CAAC,IAAK,OAAA,OAAO,CAAC,CAAC,CAAC,EAAV,CAAU,CAAC,CAAC;gCAClD,CAAC,CAAC,EAAA;;4BAVF,MAAM,GAAG,SAUP,CAAC;;;;;SACJ,CAAC,CAAC;QAEH,EAAE,CAAC,aAAa,EAAE;YAChB,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0BAA0B,EAAE;YAC7B,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;YAC1B,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;YACnC,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;YAC9B,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+BAA+B,EAAE;YAClC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,KAAK,CAAC,EAAP,CAAO,CAAC,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE;;;;;4BACrC,qBAAM,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,CAAC;;;;4CACT,qBAAM,IAAI,OAAO,CAAC,UAAA,OAAO;4CACzD,IAAM,IAAI,GAAG,6BAAgB,CAAC;gDAC5B,mBAAmB,EAAE,0CAAuB,CAAC;oDAC3C,mBAAmB,EAAE,EAAE,YAAY,cAAA,EAAE;iDACtC,CAAQ;gDACT,mBAAmB,qBAAA;gDACnB,gBAAgB,EAAE,kDAA2B,CAAC;oDAC5C,OAAO,EAAE,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE,IAAI,EAAE,aAAa,EAAS,CAAC;iDAC/D,CAAC;gDACF,qBAAqB,EAAE,4BAA4B;6CACpD,CAAC,CAAC;4CACH,IAAI,CAAC,EAAE,CAAC,uBAAU,CAAC,MAAM,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;4CACxC,UAAU,CAAC;gDACT,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;4CAClB,CAAC,EAAE,eAAe,CAAC,CAAC;wCACtB,CAAC,CAAC,EAAA;;wCAfI,MAAM,GAAsB,SAehC;wCACF,MAAM,CAAC,MAAM,CAAC,CAAC;wCACf,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;;;;6BACpC,CAAC,EAAE,EAnBwC,CAmBxC,CAAC,CAAC,EAAA;;wBAnBN,SAmBM,CAAC;;;;;KACR,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE;;;;;4BACH,qBAAM,IAAI,OAAO,CAAC,UAAA,OAAO;4BACzD,IAAM,IAAI,GAAG,6BAAgB,CAAC;gCAC5B,mBAAmB,EAAE,0CAAuB,CAAC;oCAC3C,mBAAmB,EAAE,EAAE,YAAY,cAAA,EAAE;iCACtC,CAAQ;gCACT,mBAAmB,qBAAA;gCACnB,gBAAgB,EAAE,kDAA2B,CAAC;oCAC5C,OAAO,EAAE,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE,IAAI,EAAE,aAAa,EAAS,CAAC;iCAC/D,CAAC;gCACF,qBAAqB,EAAE,4BAA4B;6BACpD,CAAC,CAAC;4BACH,IAAI,CAAC,EAAE,CAAC,uBAAU,CAAC,MAAM,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;4BACxC,UAAU,CAAC;gCACT,IAAI,CAAC,IAAI,EAAE,CAAC;4BACd,CAAC,EAAE,eAAe,CAAC,CAAC;wBACtB,CAAC,CAAC,EAAA;;wBAfI,MAAM,GAAsB,SAehC;wBACF,MAAM,CAAC,MAAM,CAAC,CAAC;wBACf,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;;;;;KACxB,CAAC,CAAC;IAEH,EAAE,CAAC,+DAA+D,EAAE;;;;;4BAChC,qBAAM,IAAI,OAAO,CAAC,UAAA,OAAO;4BACzD,IAAM,IAAI,GAAG,6BAAgB,CAAC;gCAC5B,mBAAmB,EAAE,0CAAuB,EAAS;gCACrD,mBAAmB,qBAAA;gCACnB,gBAAgB,EAAE,kDAA2B,CAAC;oCAC5C,OAAO,EAAE,CAAC;4CACR,QAAQ,EAAE,KAAK;4CACf,IAAI,EAAE,aAAa;yCACpB,EAAE;4CACD,QAAQ,EAAE,KAAK;4CACf,IAAI,EAAE,aAAa;yCACpB,CAAQ;iCACV,CAAC;6BACH,CAAC,CAAC;4BACH,IAAI,CAAC,EAAE,CAAC,uBAAU,CAAC,MAAM,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;4BACxC,UAAU,CAAC;gCACT,IAAI,CAAC,IAAI,EAAE,CAAC;4BACd,CAAC,EAAE,eAAe,CAAC,CAAC;wBACtB,CAAC,CAAC,EAAA;;wBAlBI,MAAM,GAAsB,SAkBhC;wBACF,MAAM,CAAC,MAAM,CAAC,CAAC;wBACf,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;;;;;KACtC,CAAC,CAAC;IAEH,EAAE,CAAC,0DAA0D,EAAE;;;;;4BAC3B,qBAAM,IAAI,OAAO,CAAC,UAAA,OAAO;4BACzD,IAAM,IAAI,GAAG,6BAAgB,CAAC;gCAC5B,mBAAmB,EAAE,0CAAuB,EAAS;gCACrD,mBAAmB,qBAAA;gCACnB,QAAQ,EAAE,KAAK;gCACf,gBAAgB,EAAE,kDAA2B,CAAC;oCAC5C,OAAO,EAAE,CAAC;4CACR,QAAQ,EAAE,KAAK;4CACf,IAAI,EAAE,aAAa;yCACpB,EAAE;4CACD,QAAQ,EAAE,KAAK;4CACf,IAAI,EAAE,aAAa;yCACpB,CAAQ;iCACV,CAAC;6BACH,CAAC,CAAC;4BACH,IAAI,CAAC,EAAE,CAAC,uBAAU,CAAC,MAAM,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;4BACxC,UAAU,CAAC;gCACT,IAAI,CAAC,IAAI,EAAE,CAAC;4BACd,CAAC,EAAE,eAAe,CAAC,CAAC;wBACtB,CAAC,CAAC,EAAA;;wBAnBI,MAAM,GAAsB,SAmBhC;wBACF,MAAM,CAAC,MAAM,CAAC,CAAC;wBACf,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;;;;;KACtC,CAAC,CAAC;IAEH,EAAE,CAAC,6EAA6E,EAAE;;;;;;wBAC1E,MAAM,GAA4D,EAAE,CAAC;wBAC3E,qBAAM,IAAI,OAAO,CAAC,UAAA,OAAO;gCACvB,IAAM,IAAI,GAAG,6BAAgB,CAAC;oCAC5B,mBAAmB,EAAE,0CAAuB,EAAS;oCACrD,mBAAmB,qBAAA;oCACnB,QAAQ,EAAE,eAAe;oCACzB,gBAAgB,EAAE,kDAA2B,CAAC;wCAC5C,OAAO,EAAE,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE,IAAI,EAAE,aAAa,EAAS,CAAC;qCAC/D,CAAC;oCACF,aAAa,EAAE,KAAK;oCACpB,qBAAqB,EAAE,4BAA4B;iCACpD,CAAC,CAAC;gCACH,IAAI,CAAC,EAAE,CAAC,uBAAU,CAAC,MAAM,CAAC,KAAK,EAAE,UAAA,GAAG;oCAClC,MAAM,CAAC,OAAO,CAAC,GAAG,GAAG,CAAC;oCACtB,IAAI,MAAM,CAAC,KAAK,IAAI,MAAM,CAAC,MAAM,EAAE;wCACjC,OAAO,CAAC,MAAM,CAAC,CAAC;qCACjB;gCACH,CAAC,CAAC,CAAC;gCACH,IAAI,CAAC,EAAE,CAAC,uBAAU,CAAC,MAAM,CAAC,GAAG,EAAE,UAAC,CAAC;oCAC/B,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;oCACrB,IAAI,MAAM,CAAC,KAAK,IAAI,MAAM,CAAC,MAAM,EAAE;wCACjC,OAAO,CAAC,MAAM,CAAC,CAAC;qCACjB;gCACH,CAAC,CAAC,CAAC;4BACL,CAAC,CAAC,EAAA;;wBAvBF,SAuBE,CAAC;wBACH,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;wBACtB,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;wBACrB,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,KAAM,CAAC,OAAO,EAAE,iBAAiB,CAAC,CAAC;wBACvD,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAO,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;wBAC5C,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAO,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;wBAC9C,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,MAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;;;;;KACtD,CAAC,CAAC;IAEH,QAAQ,CAAC,4CAA4C,EAAE;QACrD,0EAA0E;QAC1E,SAAS;QACT,sEAAsE;QACtE,oDAAoD;QAEpD,EAAE,CAAC,oCAAoC,EAAE;;;;;gCACL,qBAAM,IAAI,OAAO,CAAC,UAAA,OAAO;gCACzD,IAAM,IAAI,GAAG,6BAAgB,CAAC;oCAC5B,mBAAmB,qBAAA;oCACnB,gBAAgB,EAAE,kDAA2B,CAAC;wCAC5C,OAAO,EAAE,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE,IAAI,EAAE,aAAa,EAAS,CAAC;qCAC/D,CAAC;iCACH,CAAC,CAAC;gCACH,IAAI,CAAC,EAAE,CAAC,uBAAU,CAAC,MAAM,CAAC,KAAK,EAAE;oCAC/B,gCAAgC;gCAClC,CAAC,CAAC,CAAC;gCACH,IAAI,CAAC,EAAE,CAAC,uBAAU,CAAC,MAAM,CAAC,GAAG,EAAE,UAAC,CAAC,IAAK,OAAA,OAAO,CAAC,CAAC,CAAC,EAAV,CAAU,CAAC,CAAC;4BACpD,CAAC,CAAC,EAAA;;4BAXI,MAAM,GAAsB,SAWhC;4BACF,MAAM,CAAC,MAAM,CAAC,CAAC;4BACf,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;4BACpC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;4BAC/B,KAAK,GAAI,MAAM,CAAC,MAAM,GAAjB,CAAkB;4BAC9B,MAAM,CAAC,KAAK,YAAY,iCAAe,CAAC,CAAC;4BACzC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,qBAAS,CAAC,gBAAgB,CAAC,CAAC;;;;;SACtD,CAAC,CAAC;QACH,EAAE,CAAC,6BAA6B,EAAE;;;;;gCACE,qBAAM,IAAI,OAAO,CAAC,UAAA,OAAO;gCACzD,IAAM,IAAI,GAAG,6BAAgB,CAAC;oCAC5B,mBAAmB,EAAE,0CAAuB,EAAS;oCACrD,gBAAgB,EAAE,kDAA2B,CAAC;wCAC5C,OAAO,EAAE,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE,IAAI,EAAE,aAAa,EAAS,CAAC;qCAC/D,CAAC;iCACH,CAAC,CAAC;gCACH,IAAI,CAAC,EAAE,CAAC,uBAAU,CAAC,MAAM,CAAC,KAAK,EAAE;oCAC/B,gCAAgC;gCAClC,CAAC,CAAC,CAAC;gCACH,IAAI,CAAC,EAAE,CAAC,uBAAU,CAAC,MAAM,CAAC,GAAG,EAAE,UAAC,CAAC,IAAK,OAAA,OAAO,CAAC,CAAC,CAAC,EAAV,CAAU,CAAC,CAAC;4BACpD,CAAC,CAAC,EAAA;;4BAXI,MAAM,GAAsB,SAWhC;4BACF,MAAM,CAAC,MAAM,CAAC,CAAC;4BACf,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;4BACpC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;4BAC/B,KAAK,GAAI,MAAM,CAAC,MAAM,GAAjB,CAAkB;4BAC9B,MAAM,CAAC,KAAK,YAAY,iCAAe,CAAC,CAAC;4BACzC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,qBAAS,CAAC,gBAAgB,CAAC,CAAC;;;;;SACtD,CAAC,CAAC;QACH,EAAE,CAAC,iDAAiD,EAAE;;;;;gCAClB,qBAAM,IAAI,OAAO,CAAC,UAAA,OAAO;gCACzD,IAAM,IAAI,GAAG,6BAAgB,CAAC;oCAC5B,gBAAgB,EAAE,kDAA2B,CAAC;wCAC5C,OAAO,EAAE,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE,IAAI,EAAE,aAAa,EAAS,CAAC;qCAC/D,CAAC;iCACH,CAAC,CAAC;gCACH,IAAI,CAAC,EAAE,CAAC,uBAAU,CAAC,MAAM,CAAC,KAAK,EAAE;oCAC/B,gCAAgC;gCAClC,CAAC,CAAC,CAAC;gCACH,IAAI,CAAC,EAAE,CAAC,uBAAU,CAAC,MAAM,CAAC,GAAG,EAAE,UAAC,CAAC,IAAK,OAAA,OAAO,CAAC,CAAC,CAAC,EAAV,CAAU,CAAC,CAAC;4BACpD,CAAC,CAAC,EAAA;;4BAVI,MAAM,GAAsB,SAUhC;4BACF,MAAM,CAAC,MAAM,CAAC,CAAC;4BACf,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;4BACpC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;4BAC/B,KAAK,GAAI,MAAM,CAAC,MAAM,GAAjB,CAAkB;4BAC9B,MAAM,CAAC,KAAK,YAAY,iCAAe,CAAC,CAAC;4BACzC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,qBAAS,CAAC,gBAAgB,CAAC,CAAC;;;;;SACtD,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8BAA8B,EAAE;QACjC,IAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QACzC,IAAM,IAAI,GAAG,6BAAgB,CAAC;YAC5B,mBAAmB,EAAE,0CAAuB,CAAC;gBAC3C,mBAAmB,EAAE,EAAE,YAAY,EAAE,GAAG,EAAE;aAC3C,CAAQ;YACT,mBAAmB,qBAAA;YACnB,KAAK,EAAE,IAAI;YACX,gBAAgB,EAAE,kDAA2B,CAAC;gBAC5C,OAAO,EAAE,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE,IAAI,EAAE,aAAa,EAAS,CAAC;aAC/D,CAAC;SACH,CAAC,CAAC;QACH,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACjB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACjB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACvB,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC,CAAC,CAAC;IAEF;QACC,CAAC,IAAI,iCAAe,EAAE,EAAE,iBAAiB,CAAC;QAC1C,CAAC,IAAK,MAAc,CAAC,QAAQ,EAAE,EAAE,UAAU,CAAC;QAC5C,CAAC,IAAK,MAAc,CAAC,YAAY,EAAE,EAAE,cAAc,CAAC;QACpD,CAAC,IAAI,KAAK,EAAE,EAAE,kBAAkB,CAAC;KACxB,CAAC,OAAO,CAAC,UAAC,EAAa;YAAZ,aAAK,EAAE,YAAI;QAC/B,QAAQ,CAAC,mBAAiB,IAAM,EAAE;YAChC,IAAI,MAAqC,CAAC;YAE1C,UAAU,CAAC;;;;oCACA,qBAAM,IAAI,OAAO,CAAC,UAAA,OAAO;oCAChC,IAAM,IAAI,GAAG,6BAAgB,CAAC;wCAC5B,mBAAmB,EAAE,0CAAuB,CAAC;4CAC3C,KAAK,EAAE,EAAE,YAAY,EAAE,KAAK,EAAE;yCAC/B,CAAQ;wCACT,mBAAmB,qBAAA;wCACnB,QAAQ,EAAE,eAAe;wCACzB,gBAAgB,EAAE,kDAA2B,CAAC;4CAC5C,OAAO,EAAE,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE,IAAI,EAAE,aAAa,EAAS,CAAC;yCAC/D,CAAC;wCACF,qBAAqB,EAAE,4BAA4B;qCACpD,CAAC,CAAC;oCACH,IAAI,CAAC,EAAE,CAAC,uBAAU,CAAC,MAAM,CAAC,KAAK,EAAE,cAAoB,CAAC,CAAC,CAAC;oCACxD,IAAI,CAAC,EAAE,CAAC,uBAAU,CAAC,MAAM,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;gCAC1C,CAAC,CAAC,EAAA;;gCAdF,MAAM,GAAG,SAcP,CAAC;;;;;aACJ,CAAC,CAAC;YAEH,EAAE,CAAC,wBAAwB,EAAE;;gBAC3B,MAAM,CAAC,MAAM,CAAC,CAAC;gBACf,MAAM,CAAC,KAAK,OAAC,MAAM,0CAAE,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACzC,CAAC,CAAC,CAAC;YAEH,SAAS,CAAC;gBACR,MAAM,GAAG,SAAS,CAAC;YACrB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qDAAqD,EAAE;;;;;4BACzC,qBAAM,IAAI,OAAO,CAAC,UAAA,OAAO;4BACtC,IAAM,IAAI,GAAG,6BAAgB,CAAC;gCAC5B,mBAAmB,EAAE,0CAAuB,CAAC;oCAC3C,mBAAmB,EAAE,EAAE,YAAY,EAAE,GAAG,EAAE;iCAC3C,CAAQ;gCACT,mBAAmB,qBAAA;gCACnB,QAAQ,EAAE,QAAQ;gCAClB,QAAQ,EAAE,eAAe;gCACzB,gBAAgB,EAAE,kDAA2B,CAAC;oCAC5C,OAAO,EAAE,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE,aAAa,EAAS,CAAC;iCAC9D,CAAC;gCACF,qBAAqB,EAAE,4BAA4B;6BACpD,CAAC,CAAC;4BACH,IAAI,CAAC,EAAE,CAAC,uBAAU,CAAC,MAAM,CAAC,GAAG,EAAE,UAAC,CAAC,IAAK,OAAA,OAAO,CAAC,CAAC,CAAC,EAAV,CAAU,CAAC,CAAC;4BAClD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;wBAClB,CAAC,CAAC,EAAA;;wBAfI,MAAM,GAAG,SAeb;wBACF,MAAM,CAAC,MAAM,CAAC,CAAC;;;;;KAChB,CAAC,CAAC;IAEH,EAAE,CAAC,2DAA2D,EAAE;;;;;;wBACxD,IAAI,GAAG,6BAAgB,CAAC;4BAC5B,mBAAmB,EAAE,0CAAuB,EAAS;4BACrD,mBAAmB,EAAE,0CAAuB,CAAC,EAAE,gBAAgB,EAAE,KAAK,EAAE,CAAQ;4BAChF,QAAQ,EAAE,QAAQ;4BAClB,gBAAgB,EAAE,kDAA2B,CAAC;gCAC5C,OAAO,EAAE,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE,aAAa,EAAS,CAAC;6BAC9D,CAAC;yBACH,CAAC,CAAC;wBAEa,qBAAM,OAAO,CAAC,GAAG,CAAC;gCAChC,IAAI,OAAO,CAAC,UAAA,OAAO,IAAI,OAAA,IAAI,CAAC,EAAE,CAAC,uBAAU,CAAC,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,EAAzC,CAAyC,CAAC;gCACjE,IAAI,OAAO,CAAC,UAAA,OAAO,IAAI,OAAA,IAAI,CAAC,EAAE,CAAC,uBAAU,CAAC,MAAM,CAAC,GAAG,EAAE,OAAO,CAAC,EAAvC,CAAuC,CAAC;6BAChE,CAAC,EAAA;;wBAHI,OAAO,GAAG,SAGd;wBAEI,KAAK,GAAG,OAAO,CAAC,CAAC,CAAoB,CAAC;wBACtC,MAAM,GAAG,OAAO,CAAC,CAAC,CAAsB,CAAC;wBAE/C,MAAM,CAAC,KAAK,CAAC,CAAC;wBACd,MAAM,CAAC,MAAM,CAAC,CAAC;wBACf,MAAM,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;;;;;KACzB,CAAC,CAAC;IAEH,EAAE,CAAC,oEAAoE,EAAE;;;;4BACvE,qBAAM,MAAM,CAAC,OAAO,CAAC,cAAM,OAAA,IAAI,OAAO,CAAC,UAAC,CAAC,EAAE,MAAM;4BAC/C,IAAM,IAAI,GAAG,6BAAgB,CAAC;gCAC5B,mBAAmB,EAAE,0CAAuB,EAAS;gCACrD,mBAAmB,qBAAA;gCACnB,QAAQ,EAAE,QAAQ;6BACnB,CAAC,CAAC;4BACH,IAAI,CAAC,EAAE,CAAC,uBAAU,CAAC,MAAM,CAAC,KAAK,EAAE,UAAA,GAAG,IAAI,OAAA,MAAM,CAAC,GAAG,CAAC,EAAX,CAAW,CAAC,CAAC;wBACvD,CAAC,CAAC,EAPyB,CAOzB,CAAC,EAAA;;wBAPH,SAOG,CAAC;;;;;KACL,CAAC,CAAC;IAEH,EAAE,CAAC,qEAAqE,EAAE;;;;4BACxE,qBAAM,MAAM,CAAC,OAAO,CAAC,cAAM,OAAA,IAAI,OAAO,CAAC,UAAC,CAAC,EAAE,MAAM;4BAC/C,IAAM,IAAI,GAAG,6BAAgB,CAAC;gCAC5B,mBAAmB,EAAE,0CAAuB,EAAS;gCACrD,mBAAmB,EAAE,0CAAuB,EAAS;gCACrD,QAAQ,EAAE,QAAQ;gCAClB,gBAAgB,EAAE,kDAA2B,CAAC;oCAC5C,OAAO,EAAE,EAAE;iCACZ,CAAC;6BACH,CAAC,CAAC;4BACH,IAAI,CAAC,EAAE,CAAC,uBAAU,CAAC,MAAM,CAAC,KAAK,EAAE,UAAA,GAAG,IAAI,OAAA,MAAM,CAAC,GAAG,CAAC,EAAX,CAAW,CAAC,CAAC;wBACvD,CAAC,CAAC,EAVyB,CAUzB,CAAC,EAAA;;wBAVH,SAUG,CAAC;;;;;KACL,CAAC,CAAC;IAEH,EAAE,CAAC,+DAA+D,EAAE;;;;;4BAChC,qBAAM,IAAI,OAAO,CAAC,UAAA,OAAO;4BACzD,IAAM,IAAI,GAAG,6BAAgB,CAAC;gCAC5B,mBAAmB,EAAE,0CAAuB,EAAS;gCACrD,mBAAmB,EAAE,0CAAuB,EAAS;gCACrD,QAAQ,EAAE,EAAS;gCACnB,gBAAgB,EAAE,kDAA2B,CAAC;oCAC5C,OAAO,EAAE,CAAC;4CACR,QAAQ,EAAE,QAAQ;4CAClB,OAAO,EAAE,UAAU;4CACnB,IAAI,EAAE,YAAY;4CAClB,KAAK,EAAE,aAAa;4CACpB,MAAM,EAAE,cAAM,OAAA,WAAW,EAAX,CAAW;yCAC1B,CAAC;iCACH,CAAQ;6BACV,CAAC,CAAC;4BACH,IAAI,CAAC,EAAE,CAAC,uBAAU,CAAC,MAAM,CAAC,KAAK,EAAE,cAAoB,CAAC,CAAC,CAAC;4BACxD,IAAI,CAAC,EAAE,CAAC,uBAAU,CAAC,MAAM,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;wBAC1C,CAAC,CAAC,EAAA;;wBAjBI,MAAM,GAAsB,SAiBhC;wBACF,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;wBACtC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,YAAY,iCAAe,CAAC,CAAC;wBACpD,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,qBAAS,CAAC,mBAAmB,CAAC,CAAC;;;;;KACpE,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// tslint:disable only-arrow-functions\n\nimport * as assert from 'assert';\nimport * as sinon from 'sinon';\nimport { ErrorName } from '../../lib/constants';\nimport { DiagnosticError } from '../../lib/errors/DiagnosticError';\nimport {\n  OutputTest,\n  testOutputDevice,\n} from '../../lib/OutputTest';\nimport { AudioElement } from '../../lib/types';\nimport { mockAudioContextFactory } from '../mocks/MockAudioContext';\nimport { mockAudioElementFactory } from '../mocks/MockAudioElement';\nimport { mockEnumerateDevicesFactory } from '../mocks/mockEnumerateDevices';\n\nconst defaultDuration = 100;\nconst defaultVolumeEventIntervalMs = 1;\n\ndescribe('testOutputDevice', function() {\n  const audioElementFactory: (new () => AudioElement) = mockAudioElementFactory({\n    supportSetSinkId: true,\n  }) as any;\n\n  const volumeValues = 100;\n  describe(`with volume values of ${volumeValues}`, function() {\n    let report: OutputTest.Report;\n\n    before(async function() {\n      report = await new Promise(resolve => {\n        testOutputDevice({\n          audioContextFactory: mockAudioContextFactory({\n            analyserNodeOptions: { volumeValues },\n          }) as any,\n          audioElementFactory,\n          duration: defaultDuration,\n          enumerateDevices: mockEnumerateDevicesFactory({\n            devices: [{ deviceId: 'default', kind: 'audiooutput' } as any],\n          }),\n          volumeEventIntervalMs: defaultVolumeEventIntervalMs,\n        }).on(OutputTest.Events.End, (r) => resolve(r));\n      });\n    });\n\n    it('should pass', function() {\n      assert(report.didPass);\n    });\n\n    it('timestamps should be set', function() {\n      assert(report.testTiming);\n      assert(report.testTiming.duration);\n      assert(report.testTiming.end);\n      assert(report.testTiming.start);\n    });\n\n    it(`all volume values should be ${volumeValues}`, function() {\n      assert(report.values.every(v => v === volumeValues));\n    });\n  });\n\n  describe('with volume values of 0', function() {\n    let report: OutputTest.Report;\n\n    before(async function() {\n      const audioContextFactory: typeof AudioContext = mockAudioContextFactory({\n        analyserNodeOptions: { volumeValues: 0 },\n      }) as any;\n\n      report = await new Promise(resolve => {\n        testOutputDevice({\n          audioContextFactory,\n          audioElementFactory,\n          duration: defaultDuration,\n          enumerateDevices: mockEnumerateDevicesFactory({\n            devices: [{ deviceId: 'default', kind: 'audiooutput' } as any],\n          }),\n          volumeEventIntervalMs: defaultVolumeEventIntervalMs,\n        }).on(OutputTest.Events.End, (r) => resolve(r));\n      });\n    });\n\n    it('should pass', function() {\n      assert(report.didPass);\n    });\n\n    it('timestamps should be set', function() {\n      assert(report.testTiming);\n      assert(report.testTiming.duration);\n      assert(report.testTiming.end);\n      assert(report.testTiming.start);\n    });\n\n    it('all volume values should be 0', function() {\n      assert(report.values.every(v => v === 0));\n    });\n  });\n\n  it('should report if passed normally', async function() {\n    await Promise.all([true, false].map(pass => (async () => {\n      const report: OutputTest.Report = await new Promise(resolve => {\n        const test = testOutputDevice({\n          audioContextFactory: mockAudioContextFactory({\n            analyserNodeOptions: { volumeValues },\n          }) as any,\n          audioElementFactory,\n          enumerateDevices: mockEnumerateDevicesFactory({\n            devices: [{ deviceId: 'default', kind: 'audiooutput' } as any],\n          }),\n          volumeEventIntervalMs: defaultVolumeEventIntervalMs,\n        });\n        test.on(OutputTest.Events.End, resolve);\n        setTimeout(() => {\n          test.stop(pass);\n        }, defaultDuration);\n      });\n      assert(report);\n      assert.equal(report.didPass, pass);\n    })()));\n  });\n\n  it('should report if passed normally', async function() {\n    const report: OutputTest.Report = await new Promise(resolve => {\n      const test = testOutputDevice({\n        audioContextFactory: mockAudioContextFactory({\n          analyserNodeOptions: { volumeValues },\n        }) as any,\n        audioElementFactory,\n        enumerateDevices: mockEnumerateDevicesFactory({\n          devices: [{ deviceId: 'default', kind: 'audiooutput' } as any],\n        }),\n        volumeEventIntervalMs: defaultVolumeEventIntervalMs,\n      });\n      test.on(OutputTest.Events.End, resolve);\n      setTimeout(() => {\n        test.stop();\n      }, defaultDuration);\n    });\n    assert(report);\n    assert(report.didPass);\n  });\n\n  it('should report the default device if not passing in a deviceId', async function() {\n    const report: OutputTest.Report = await new Promise(resolve => {\n      const test = testOutputDevice({\n        audioContextFactory: mockAudioContextFactory() as any,\n        audioElementFactory,\n        enumerateDevices: mockEnumerateDevicesFactory({\n          devices: [{\n            deviceId: 'foo',\n            kind: 'audiooutput',\n          }, {\n            deviceId: 'bar',\n            kind: 'audiooutput',\n          }] as any,\n        }),\n      });\n      test.on(OutputTest.Events.End, resolve);\n      setTimeout(() => {\n        test.stop();\n      }, defaultDuration);\n    });\n    assert(report);\n    assert.equal(report.deviceId, 'foo');\n  });\n\n  it('should report the passed device if passing in a deviceId', async function() {\n    const report: OutputTest.Report = await new Promise(resolve => {\n      const test = testOutputDevice({\n        audioContextFactory: mockAudioContextFactory() as any,\n        audioElementFactory,\n        deviceId: 'bar',\n        enumerateDevices: mockEnumerateDevicesFactory({\n          devices: [{\n            deviceId: 'foo',\n            kind: 'audiooutput',\n          }, {\n            deviceId: 'bar',\n            kind: 'audiooutput',\n          }] as any,\n        }),\n      });\n      test.on(OutputTest.Events.End, resolve);\n      setTimeout(() => {\n        test.stop();\n      }, defaultDuration);\n    });\n    assert(report);\n    assert.equal(report.deviceId, 'bar');\n  });\n\n  it('should report a failure if allowed to timeout and `passOnTimeout === false`', async function() {\n    const result: { error?: DiagnosticError, report?: OutputTest.Report } = {};\n    await new Promise(resolve => {\n      const test = testOutputDevice({\n        audioContextFactory: mockAudioContextFactory() as any,\n        audioElementFactory,\n        duration: defaultDuration,\n        enumerateDevices: mockEnumerateDevicesFactory({\n          devices: [{ deviceId: 'default', kind: 'audiooutput' } as any],\n        }),\n        passOnTimeout: false,\n        volumeEventIntervalMs: defaultVolumeEventIntervalMs,\n      });\n      test.on(OutputTest.Events.Error, err => {\n        result['error'] = err;\n        if (result.error && result.report) {\n          resolve(result);\n        }\n      });\n      test.on(OutputTest.Events.End, (r) => {\n        result['report'] = r;\n        if (result.error && result.report) {\n          resolve(result);\n        }\n      });\n    });\n    assert(result.report);\n    assert(result.error);\n    assert.equal(result.error!.message, 'Test timed out.');\n    assert.equal(result.report!.didPass, false);\n    assert.equal(result.report!.errors.length, 1);\n    assert.equal(result.error, result.report!.errors[0]);\n  });\n\n  describe('should immediately end and report an error', function() {\n    // not providing the mock object here results in the test resorting to the\n    // global\n    // because these are unit tests, and node does not have these globals,\n    // they are null and are essentially \"not supported\"\n\n    it('when AudioContext is not supported', async function() {\n      const report: OutputTest.Report = await new Promise(resolve => {\n        const test = testOutputDevice({\n          audioElementFactory,\n          enumerateDevices: mockEnumerateDevicesFactory({\n            devices: [{ deviceId: 'default', kind: 'audiooutput' } as any],\n          }),\n        });\n        test.on(OutputTest.Events.Error, () => {\n          // do nothing, prevent rejection\n        });\n        test.on(OutputTest.Events.End, (r) => resolve(r));\n      });\n      assert(report);\n      assert.equal(report.didPass, false);\n      assert.equal(report.errors.length, 1);\n      const [error] = report.errors;\n      assert(error instanceof DiagnosticError);\n      assert.equal(error.name, ErrorName.UnsupportedError);\n    });\n    it('when Audio is not supported', async function() {\n      const report: OutputTest.Report = await new Promise(resolve => {\n        const test = testOutputDevice({\n          audioContextFactory: mockAudioContextFactory() as any,\n          enumerateDevices: mockEnumerateDevicesFactory({\n            devices: [{ deviceId: 'default', kind: 'audiooutput' } as any],\n          }),\n        });\n        test.on(OutputTest.Events.Error, () => {\n          // do nothing, prevent rejection\n        });\n        test.on(OutputTest.Events.End, (r) => resolve(r));\n      });\n      assert(report);\n      assert.equal(report.didPass, false);\n      assert.equal(report.errors.length, 1);\n      const [error] = report.errors;\n      assert(error instanceof DiagnosticError);\n      assert.equal(error.name, ErrorName.UnsupportedError);\n    });\n    it('when neither AudioContext or Audio is supported', async function() {\n      const report: OutputTest.Report = await new Promise(resolve => {\n        const test = testOutputDevice({\n          enumerateDevices: mockEnumerateDevicesFactory({\n            devices: [{ deviceId: 'default', kind: 'audiooutput' } as any],\n          }),\n        });\n        test.on(OutputTest.Events.Error, () => {\n          // do nothing, prevent rejection\n        });\n        test.on(OutputTest.Events.End, (r) => resolve(r));\n      });\n      assert(report);\n      assert.equal(report.didPass, false);\n      assert.equal(report.errors.length, 1);\n      const [error] = report.errors;\n      assert(error instanceof DiagnosticError);\n      assert.equal(error.name, ErrorName.UnsupportedError);\n    });\n  });\n\n  it('should warn if stopped twice', function() {\n    const stub = sinon.stub(console, 'warn');\n    const test = testOutputDevice({\n      audioContextFactory: mockAudioContextFactory({\n        analyserNodeOptions: { volumeValues: 100 },\n      }) as any,\n      audioElementFactory,\n      debug: true,\n      enumerateDevices: mockEnumerateDevicesFactory({\n        devices: [{ deviceId: 'default', kind: 'audiooutput' } as any],\n      }),\n    });\n    test.stop(false);\n    test.stop(false);\n    assert(stub.callCount);\n    stub.restore();\n  });\n\n  ([\n    [new DiagnosticError(), 'DiagnosticError'],\n    [new (global as any).DOMError(), 'DOMError'],\n    [new (global as any).DOMException(), 'DOMException'],\n    [new Error(), 'an unknown error'],\n  ] as const).forEach(([error, name]) => {\n    describe(`should handle ${name}`, function() {\n      let report: OutputTest.Report | undefined;\n\n      beforeEach(async function() {\n        report = await new Promise(resolve => {\n          const test = testOutputDevice({\n            audioContextFactory: mockAudioContextFactory({\n              throw: { construction: error },\n            }) as any,\n            audioElementFactory,\n            duration: defaultDuration,\n            enumerateDevices: mockEnumerateDevicesFactory({\n              devices: [{ deviceId: 'default', kind: 'audiooutput' } as any],\n            }),\n            volumeEventIntervalMs: defaultVolumeEventIntervalMs,\n          });\n          test.on(OutputTest.Events.Error, () => { /* no-op */ });\n          test.on(OutputTest.Events.End, resolve);\n        });\n      });\n\n      it('should report an error', function() {\n        assert(report);\n        assert.equal(report?.errors.length, 1);\n      });\n\n      afterEach(function() {\n        report = undefined;\n      });\n    });\n  });\n\n  it('should allow `deviceId` if `setSinkId` is supported', async function() {\n    const report = await new Promise(resolve => {\n      const test = testOutputDevice({\n        audioContextFactory: mockAudioContextFactory({\n          analyserNodeOptions: { volumeValues: 100 },\n        }) as any,\n        audioElementFactory,\n        deviceId: 'foobar',\n        duration: defaultDuration,\n        enumerateDevices: mockEnumerateDevicesFactory({\n          devices: [{ deviceId: 'foobar', kind: 'audiooutput' } as any],\n        }),\n        volumeEventIntervalMs: defaultVolumeEventIntervalMs,\n      });\n      test.on(OutputTest.Events.End, (r) => resolve(r));\n      test.stop(true);\n    });\n    assert(report);\n  });\n\n  it('should not allow `deviceId` if `setSinkId` is unsupported', async function() {\n    const test = testOutputDevice({\n      audioContextFactory: mockAudioContextFactory() as any,\n      audioElementFactory: mockAudioElementFactory({ supportSetSinkId: false }) as any,\n      deviceId: 'foobar',\n      enumerateDevices: mockEnumerateDevicesFactory({\n        devices: [{ deviceId: 'foobar', kind: 'audiooutput' } as any],\n      }),\n    });\n\n    const results = await Promise.all([\n      new Promise(resolve => test.on(OutputTest.Events.Error, resolve)),\n      new Promise(resolve => test.on(OutputTest.Events.End, resolve)),\n    ]);\n\n    const error = results[0] as DiagnosticError;\n    const report = results[1] as OutputTest.Report;\n\n    assert(error);\n    assert(report);\n    assert(!report.didPass);\n  });\n\n  it('should throw during setup when `enumerateDevices` is not supported', async function() {\n    await assert.rejects(() => new Promise((_, reject) => {\n      const test = testOutputDevice({\n        audioContextFactory: mockAudioContextFactory() as any,\n        audioElementFactory,\n        deviceId: 'foobar',\n      });\n      test.on(OutputTest.Events.Error, err => reject(err));\n    }));\n  });\n\n  it('should throw during setup when there are no detected output devices', async function() {\n    await assert.rejects(() => new Promise((_, reject) => {\n      const test = testOutputDevice({\n        audioContextFactory: mockAudioContextFactory() as any,\n        audioElementFactory: mockAudioElementFactory() as any,\n        deviceId: 'foobar',\n        enumerateDevices: mockEnumerateDevicesFactory({\n          devices: [],\n        }),\n      });\n      test.on(OutputTest.Events.Error, err => reject(err));\n    }));\n  });\n\n  it('should throw `InvalidOptions` error if passed invalid options', async function() {\n    const report: OutputTest.Report = await new Promise(resolve => {\n      const test = testOutputDevice({\n        audioContextFactory: mockAudioContextFactory() as any,\n        audioElementFactory: mockAudioElementFactory() as any,\n        deviceId: {} as any, // is invalid because not type `string`\n        enumerateDevices: mockEnumerateDevicesFactory({\n          devices: [{\n            deviceId: 'foobar',\n            groupId: 'biffbazz',\n            kind: 'audioinput',\n            label: 'test-device',\n            toJSON: () => 'some-json',\n          }],\n        }) as any,\n      });\n      test.on(OutputTest.Events.Error, () => { /* no-op */ });\n      test.on(OutputTest.Events.End, resolve);\n    });\n    assert.equal(report.errors.length, 1);\n    assert(report.errors[0] instanceof DiagnosticError);\n    assert.equal(report.errors[0].name, ErrorName.InvalidOptionsError);\n  });\n});\n"]}