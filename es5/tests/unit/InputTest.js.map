{"version":3,"file":"InputTest.js","sourceRoot":"","sources":["../../../tests/unit/InputTest.ts"],"names":[],"mappings":"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","sourcesContent":["// tslint:disable only-arrow-functions\n\nimport * as assert from 'assert';\nimport * as sinon from 'sinon';\nimport { WarningName } from '../../lib/constants';\nimport { DiagnosticError } from '../../lib/errors/DiagnosticError';\nimport {\n  InputTest,\n  testInputDevice,\n} from '../../lib/InputTest';\nimport { mockAudioContextFactory } from '../mocks/MockAudioContext';\nimport { mockEnumerateDevicesFactory } from '../mocks/mockEnumerateDevices';\nimport { mockGetUserMediaFactory } from '../mocks/mockGetUserMedia';\nimport { MockMediaStream } from '../mocks/MockMediaStream';\nimport { MockTrack } from '../mocks/MockTrack';\n\nfunction createTestOptions(\n  overrides: Partial<InputTest.Options> = {},\n): InputTest.Options {\n  return {\n    audioContextFactory: mockAudioContextFactory() as any,\n    duration: 1000,\n    enumerateDevices: mockEnumerateDevicesFactory({\n      devices: [{ deviceId: 'default', kind: 'audioinput' } as any],\n    }),\n    getUserMedia: mockGetUserMediaFactory({\n      mediaStream: new MockMediaStream({\n        tracks: [new MockTrack()],\n      }),\n    }) as any,\n    volumeEventIntervalMs: 100,\n    ...overrides,\n  };\n}\n\ndescribe('testInputDevice', function() {\n  let clock: sinon.SinonFakeTimers;\n\n  before(function() {\n    clock = sinon.useFakeTimers();\n  });\n\n  after(function() {\n    sinon.restore();\n  });\n\n  function createBasicTest(\n    testOptions: InputTest.Options,\n  ) {\n    const handlers = {\n      [InputTest.Events.End]: sinon.stub(),\n      [InputTest.Events.Error]: sinon.stub(),\n      [InputTest.Events.Volume]: sinon.stub(),\n      [InputTest.Events.Warning]: sinon.stub(),\n      [InputTest.Events.WarningCleared]: sinon.stub(),\n    };\n\n    const inputTest = testInputDevice(testOptions);\n    inputTest.on(InputTest.Events.Error, handlers.error);\n    inputTest.on(InputTest.Events.Volume, handlers.volume);\n    inputTest.on(InputTest.Events.End, handlers.end);\n    inputTest.on(InputTest.Events.WarningCleared, handlers['warning-cleared']);\n    inputTest.on(InputTest.Events.Warning, handlers.warning);\n\n    const resetHandlers =\n      () => Object.values(handlers).forEach(handler => handler.reset());\n\n    return {\n      handlers,\n      inputTest,\n      resetHandlers,\n    };\n  }\n\n  it('should throw if passed invalid options', async function() {\n    const invalidOptions = [{\n      deviceId: 0,\n    }, {\n      deviceId: {},\n    }, {\n      duration: -10,\n    }, {\n      duration: {},\n    }, {\n      volumeEventIntervalMs: -10,\n    }, {\n      volumeEventIntervalMs: {},\n    }] as any;\n\n    for (const overrides of invalidOptions) {\n      const options = createTestOptions(overrides);\n      const { handlers } = createBasicTest(options);\n      await clock.runAllAsync();\n      assert(handlers.end.calledOnce);\n      assert(handlers.error.calledOnce);\n      assert(handlers.end.calledAfter(handlers.error));\n      assert(handlers.volume.notCalled);\n    }\n  });\n\n  it('should warn if stopped multiple times', async function() {\n    const consoleStub = sinon.stub(console, 'warn');\n    try {\n      const options = createTestOptions({ debug: true });\n      const test = testInputDevice(options);\n      test.stop();\n      test.stop();\n      assert(consoleStub.calledOnce);\n    } finally {\n      await clock.runAllAsync();\n      consoleStub.restore();\n    }\n  });\n\n  describe('in a supported environment', function() {\n    it('should properly warn the user when low audio levels should be detected', async function() {\n      const testOptions = createTestOptions({\n        audioContextFactory: mockAudioContextFactory({\n          analyserNodeOptions: { volumeValues: 0 },\n        }) as any,\n        duration: Infinity,\n      });\n      const {\n        handlers,\n        inputTest,\n        resetHandlers,\n      } = createBasicTest(testOptions);\n\n      await clock.tickAsync(5000);\n\n      assert(handlers.error.notCalled);\n      assert(handlers.volume.called);\n      assert(handlers.volume.args.every(([v]) => v === 0));\n      assert(handlers.end.notCalled);\n      assert(handlers.warning.calledOnce);\n      assert(handlers.warning.args[0][0] === WarningName.LowAudioLevel);\n\n      resetHandlers();\n\n      const original = inputTest['_onVolume'].bind(inputTest);\n      inputTest['_onVolume'] = () => {\n        original(100);\n      };\n\n      await clock.tickAsync(5000);\n\n      assert(handlers.volume.called);\n      assert(handlers.volume.args.every(([v]) => v === 100));\n      assert(handlers.end.notCalled);\n      assert(handlers.warning.notCalled);\n      assert(handlers['warning-cleared'].calledOnce);\n      assert(handlers['warning-cleared'].args[0][0] === WarningName.LowAudioLevel);\n\n      resetHandlers();\n\n      inputTest.stop();\n\n      await clock.runAllAsync();\n\n      [\n        handlers.volume,\n        handlers.error,\n        handlers.warning,\n        handlers['warning-cleared'],\n      ].forEach(h => {\n        assert(h.notCalled);\n      });\n\n      assert(handlers.end.calledOnce);\n    });\n\n    describe('when all volume values are all 0', function() {\n      let errorHandler: sinon.SinonStub;\n      let volumeHandler: sinon.SinonStub;\n      let endHandler: sinon.SinonStub;\n\n      before(async function() {\n        const options = createTestOptions({\n          audioContextFactory: mockAudioContextFactory({\n            analyserNodeOptions: { volumeValues: 0 },\n          }) as any,\n        });\n        const { handlers } = createBasicTest(options);\n        await clock.runAllAsync();\n        endHandler = handlers.end;\n        errorHandler = handlers.error;\n        volumeHandler = handlers.volume;\n      });\n\n      it('should not have emitted any error event', function() {\n        assert(errorHandler.notCalled);\n      });\n\n      it('should have emitted at least one volume event', function() {\n        assert(volumeHandler.called);\n      });\n\n      it('should generate a valid report', function() {\n        assert(endHandler.calledOnce);\n        const report: InputTest.Report = endHandler.args[0][0];\n        assert(report);\n        assert(!report.didPass);\n        assert.equal(report.values.length, volumeHandler.callCount);\n        assert(report.values.every(v => v === 0));\n      });\n    });\n\n    describe('when all volume values are all 100', function() {\n      let errorHandler: sinon.SinonStub;\n      let volumeHandler: sinon.SinonStub;\n      let endHandler: sinon.SinonStub;\n\n      before(async function() {\n        const options = createTestOptions({\n          audioContextFactory: mockAudioContextFactory({\n            analyserNodeOptions: { volumeValues: 100 },\n          }) as any,\n        });\n        const { handlers } = createBasicTest(options);\n        await clock.runAllAsync();\n        endHandler = handlers.end;\n        errorHandler = handlers.error;\n        volumeHandler = handlers.volume;\n      });\n\n      it('should not have emitted any error event', function() {\n        assert(errorHandler.notCalled);\n      });\n\n      it('should have emitted at least one volume event', function() {\n        assert(volumeHandler.called);\n      });\n\n      it('should generate a valid report', function() {\n        assert(endHandler.calledOnce);\n        const report: InputTest.Report = endHandler.args[0][0];\n        assert(report);\n        assert(report.didPass);\n        assert.equal(report.values.length, volumeHandler.callCount);\n        assert(report.values.every(v => v === 100));\n      });\n    });\n  });\n\n  describe('in an unsupported environment', function() {\n    describe('it should immediately end and report an error', function() {\n      ([ [\n        'AudioContext', createTestOptions({ audioContextFactory: undefined }),\n      ], [\n        'getUserMedia', createTestOptions({ getUserMedia: undefined }),\n      ], [\n        'enumerateDevices', createTestOptions({ enumerateDevices: undefined }),\n      ] ] as const).forEach(([title, options]) => {\n        it(`when ${title} is not supported`, async function() {\n          const { handlers } = createBasicTest(options);\n          await clock.runAllAsync();\n          const endHandler = handlers.end;\n          const errorHandler = handlers.error;\n          const volumeHandler = handlers.volume;\n\n          assert(endHandler.calledOnce);\n          const report: InputTest.Report = endHandler.args[0][0];\n          assert(report);\n          assert(!report.didPass);\n          assert(errorHandler.calledOnce);\n          assert(errorHandler.calledBefore(endHandler));\n          assert(volumeHandler.notCalled);\n        });\n      });\n    });\n  });\n\n  describe('should handle when an error is thrown during the test', function() {\n    ([ [\n      'AudioContext', createTestOptions({\n        audioContextFactory: mockAudioContextFactory({\n          throw: { construction: new DiagnosticError() },\n        }) as any,\n      }),\n    ], [\n      'getUserMedia', createTestOptions({\n        getUserMedia: mockGetUserMediaFactory({\n          throw: new DiagnosticError(),\n        }) as any,\n      }),\n    ], [\n      'enumerateDevices', createTestOptions({\n        enumerateDevices: mockEnumerateDevicesFactory({\n          devices: [],\n          throw: new DiagnosticError(),\n        }) as any,\n      }),\n    ] ] as const).forEach(([title, options]) => {\n      it(`by ${title}`, async function() {\n        const { handlers } = createBasicTest(options);\n        await clock.runAllAsync();\n        assert(handlers.end.calledOnce);\n        const report: InputTest.Report = handlers.end.args[0][0];\n        assert(report);\n        assert(!report.didPass);\n        assert(handlers.error.calledOnce);\n        assert(handlers.error.calledBefore(handlers.end));\n        assert(handlers.volume.notCalled);\n      });\n    });\n\n    ([ [\n      'DiagnosticError', new DiagnosticError(),\n    ], [\n      'DOMException', new (global as any).DOMException(),\n    ], [\n      'DOMError', new (global as any).DOMError(),\n    ], [\n      'unknown error', new Error(),\n    ] ] as const).forEach(([title, error]) => {\n      it(`of type ${title}`, async function() {\n        const options = createTestOptions({\n          audioContextFactory: mockAudioContextFactory({\n            throw: { construction: error },\n          }) as any,\n        });\n        const { handlers } = createBasicTest(options);\n        await clock.runAllAsync();\n        assert(handlers.end.calledOnce);\n        assert(handlers.error.calledOnce);\n        assert(handlers.end.calledAfter(handlers.error));\n        assert(handlers.volume.notCalled);\n\n        const handledError = handlers.error.args[0][0];\n        const report: InputTest.Report = handlers.end.args[0][0];\n        assert(!report.didPass);\n        assert.equal(report.errors.length, 1);\n        assert.equal(handledError, report.errors[0]);\n      });\n    });\n  });\n\n  describe('audio recording', () => {\n    let initCallback: any;\n    let audioRecorderFactory: any;\n\n    beforeEach(() => {\n      initCallback = sinon.stub();\n      audioRecorderFactory = function(this: any) {\n        initCallback();\n        this.stop = () => Promise.resolve();\n        this.url = 'foo';\n      };\n    });\n\n    describe('when enableRecording is false', () => {\n      it('should not initialize AudioRecorder by default', async () => {\n        const options = createTestOptions({\n          audioRecorderFactory,\n        });\n        createBasicTest(options);\n        await clock.runAllAsync();\n        sinon.assert.notCalled(initCallback);\n      });\n\n      it('should not initialize AudioRecorder if enableRecording is explicitly set to false', async () => {\n        const options = createTestOptions({\n          audioRecorderFactory,\n          enableRecording: false,\n        });\n        createBasicTest(options);\n        await clock.runAllAsync();\n        sinon.assert.notCalled(initCallback);\n      });\n\n      it('should not include recording url in the report', async () => {\n        const options = createTestOptions({\n          audioRecorderFactory,\n          enableRecording: false,\n        });\n        const { handlers } = createBasicTest(options);\n        await clock.runAllAsync();\n        const report: InputTest.Report = handlers.end.args[0][0];\n\n        assert(!report.recordingUrl);\n      });\n    });\n\n    describe('when enableRecording is true', () => {\n      let report: InputTest.Report;\n\n      beforeEach(async () => {\n        const options = createTestOptions({\n          audioRecorderFactory,\n          enableRecording: true,\n        });\n        const { handlers } = createBasicTest(options);\n        await clock.runAllAsync();\n        report = handlers.end.args[0][0];\n      });\n\n      it('should initialize AudioRecorder', () => {\n        sinon.assert.calledOnce(initCallback);\n      });\n\n      it('should set report.recordingUrl', () => {\n        assert.equal(report.recordingUrl, 'foo');\n      });\n\n      it('should fail if audio recorder fails', async () => {\n        audioRecorderFactory = function(this: any) {\n          initCallback();\n          this.stop = () => Promise.reject('foo-error');\n          this.url = 'foo';\n        };\n        const options = createTestOptions({\n          audioRecorderFactory,\n          enableRecording: true,\n        });\n        const { handlers } = createBasicTest(options);\n        await clock.runAllAsync();\n        report = handlers.end.args[0][0];\n\n        sinon.assert.calledOnce(handlers.error);\n        assert(!report.recordingUrl);\n        assert(!report.didPass);\n        assert.equal(report.errors.length, 1);\n        assert.equal(report.errors[0], 'foo-error');\n      });\n    });\n  });\n});\n"]}