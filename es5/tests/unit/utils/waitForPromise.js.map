{"version":3,"file":"waitForPromise.js","sourceRoot":"","sources":["../../../../tests/unit/utils/waitForPromise.ts"],"names":[],"mappings":"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","sourcesContent":["// tslint:disable only-arrow-functions\n\nimport * as assert from 'assert';\nimport * as sinon from 'sinon';\n\nimport { waitForPromise } from '../../../lib/utils';\n\ndescribe('waitForPromise', function() {\n  let clock: sinon.SinonFakeTimers;\n\n  before(function() {\n    clock = sinon.useFakeTimers();\n  });\n\n  after(function() {\n    sinon.restore();\n  });\n\n  it('should reject if the promise times out', async function() {\n    const rejectHandler = sinon.stub();\n    const resolveHandler = sinon.stub();\n\n    waitForPromise(new Promise(() => {\n      // do nothing\n    }), 1).then(resolveHandler).catch(rejectHandler);\n\n    await clock.runAllAsync();\n\n    assert(rejectHandler.calledOnce);\n    assert(resolveHandler.notCalled);\n  });\n  it('should reject if the promise resolves after time out', async function() {\n    const rejectHandler = sinon.stub();\n    const resolveHandler = sinon.stub();\n\n    waitForPromise(new Promise(resolve => {\n      setTimeout(() => { resolve(); }, 2);\n    }), 1).then(resolveHandler).catch(rejectHandler);\n\n    await clock.runAllAsync();\n\n    assert(rejectHandler.calledOnce);\n    assert(resolveHandler.notCalled);\n  });\n  it('should reject if the promise rejects', async function() {\n    const rejectHandler = sinon.stub();\n    const resolveHandler = sinon.stub();\n\n    waitForPromise(Promise.reject(), 1).then(resolveHandler).catch(rejectHandler);\n\n    await clock.runAllAsync();\n\n    assert(rejectHandler.calledOnce);\n    assert(resolveHandler.notCalled);\n  });\n  it('should resolve if the promise resolves before time out', async function() {\n    const rejectHandler = sinon.stub();\n    const resolveHandler = sinon.stub();\n\n    waitForPromise(new Promise(resolve => {\n      setTimeout(() => resolve(), 1);\n    }), 2).then(resolveHandler).catch(rejectHandler);\n\n    await clock.runAllAsync();\n\n    assert(resolveHandler.calledOnce);\n    assert(rejectHandler.notCalled);\n  });\n});\n"]}