{"version":3,"file":"candidate.js","sourceRoot":"","sources":["../../../../tests/unit/utils/candidate.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+BAAiC;AACjC,0DAA6E;AAE7E,IAAM,oBAAoB,GAAG,OAAO,CAAC,mDAAmD,CAAC,CAAC;AAC1F,IAAM,uBAAuB,GAAG,OAAO,CAAC,sDAAsD,CAAC,CAAC;AAChG,IAAM,iBAAiB,GAAG,OAAO,CAAC,kDAAkD,CAAC,CAAC;AACtF,IAAM,oBAAoB,GAAG,OAAO,CAAC,qDAAqD,CAAC,CAAC;AAE5F,QAAQ,CAAC,qBAAqB,EAAE;IAC9B,IAAM,cAAc,GAAG,UAAC,OAAc;QACpC,OAAO,OAAO,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,QAAQ;YAClC,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;YAC/B,OAAO,GAAG,CAAC;QACb,CAAC,EAAE,IAAI,GAAG,EAAE,CAAC,CAAC;IAChB,CAAC,CAAC;IACF,EAAE,CAAC,qDAAqD,EAAE;;;;;oBAElD,cAAc,GAAQ,EAAE,QAAQ,gBAAK,OAAO,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;;;;oBAEjF,qBAAM,yCAA6B,CAAC,cAAc,CAAC,EAAA;;oBAAnD,SAAmD,CAAC;;;;oBAEpD,KAAK,GAAG,IAAE,CAAC;;;oBAEb,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;;;;SAClC,CAAC,CAAC;IAEH,EAAE,CAAC,8DAA8D,EAAE;;;;;oBAC3D,WAAW,GAAG,cAAc,CAAC,oBAAoB,CAAC,CAAC;oBACnD,cAAc,GAAQ,EAAE,QAAQ,gBAAK,OAAO,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;oBAC3D,qBAAM,yCAA6B,CAAC,cAAc,CAAC,EAAA;;oBAAtE,gBAAgB,GAAG,SAAmD;oBAC5E,MAAM,CAAC,SAAS,CAAC,gBAAgB,EAAE,iBAAiB,CAAC,CAAC;;;;SACvD,CAAC,CAAC;IAEH,EAAE,CAAC,iEAAiE,EAAE;;;;;oBAC9D,WAAW,GAAG,cAAc,CAAC,uBAAuB,CAAC,CAAC;oBACtD,cAAc,GAAQ,EAAE,QAAQ,gBAAK,OAAO,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;oBAC3D,qBAAM,yCAA6B,CAAC,cAAc,CAAC,EAAA;;oBAAtE,gBAAgB,GAAG,SAAmD;oBAC5E,MAAM,CAAC,SAAS,CAAC,gBAAgB,EAAE,oBAAoB,CAAC,CAAC;;;;SAC1D,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import * as assert from 'assert';\nimport { getRTCIceCandidateStatsReport } from '../../../lib/utils/candidate';\n\nconst withTransportPayload = require('../../payloads/rtcstatsreport-with-transport.json');\nconst withoutTransportPayload = require('../../payloads/rtcstatsreport-without-transport.json');\nconst withTransportSpec = require('../../specs/rtcicecandidates-with-transport.json');\nconst withoutTransportSpec = require('../../specs/rtcicecandidates-without-transport.json');\n\ndescribe('ICE Candidate Stats', () => {\n  const getStatsReport = (payload: any[]) => {\n    return payload.reduce((map, rtcStats) => {\n      map.set(rtcStats.id, rtcStats);\n      return map;\n    }, new Map());\n  };\n  it('should reject if WebRTC statistics is not supported', async () => {\n    let error;\n    const peerConnection: any = { getStats() { return Promise.reject('Foo error'); } };\n    try {\n      await getRTCIceCandidateStatsReport(peerConnection);\n    } catch (ex) {\n      error = ex;\n    }\n    assert.equal(error, 'Foo error');\n  });\n\n  it('should return ice candidates for report with transport stats', async () => {\n    const statsReport = getStatsReport(withTransportPayload);\n    const peerConnection: any = { getStats() { return Promise.resolve(statsReport); } };\n    const rtcIceCandidates = await getRTCIceCandidateStatsReport(peerConnection);\n    assert.deepEqual(rtcIceCandidates, withTransportSpec);\n  });\n\n  it('should return ice candidates for report without transport stats', async () => {\n    const statsReport = getStatsReport(withoutTransportPayload);\n    const peerConnection: any = { getStats() { return Promise.resolve(statsReport); } };\n    const rtcIceCandidates = await getRTCIceCandidateStatsReport(peerConnection);\n    assert.deepEqual(rtcIceCandidates, withoutTransportSpec);\n  });\n});\n"]}