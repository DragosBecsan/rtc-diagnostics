{"version":3,"file":"MockAudioContext.js","sourceRoot":"","sources":["../../../tests/mocks/MockAudioContext.ts"],"names":[],"mappings":";AAAA,0BAA0B;;AAG1B,uDAAsD;AACtD,qFAAoF;AACpF,6FAA4F;AAC5F,mFAAkF;AAElF,IAAM,qCAAqC,GAA6B;IACtE,mBAAmB,EAAE,mCAAgB,CAAC,cAAc;CACrD,CAAC;AAEW,QAAA,uBAAuB,GAAG,UACrC,OAAyE;IAAzE,wBAAA,EAAA,+CAAyE;IACtE;QACH;;YACE,UAAI,OAAO,CAAC,KAAK,0CAAE,YAAY,EAAE;gBAC/B,MAAM,OAAO,CAAC,KAAK,CAAC,YAAY,CAAC;aAClC;QACH,CAAC;QACD,uBAAK,GAAL,cAAS,CAAC;QACV,gCAAc,GAAd;;YACE,UAAI,OAAO,CAAC,KAAK,0CAAE,cAAc,EAAE;gBACjC,MAAM,OAAO,CAAC,KAAK,CAAC,cAAc,CAAC;aACpC;YACD,OAAO,IAAI,mCAAgB,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;QAC3D,CAAC;QACD,0CAAwB,GAAxB;;YACE,UAAI,OAAO,CAAC,KAAK,0CAAE,wBAAwB,EAAE;gBAC3C,MAAM,OAAO,CAAC,KAAK,CAAC,wBAAwB,CAAC;aAC9C;YACD,OAAO,IAAI,iEAA+B,EAAE,CAAC;QAC/C,CAAC;QACD,8CAA4B,GAA5B;;YACE,UAAI,OAAO,CAAC,KAAK,0CAAE,4BAA4B,EAAE;gBAC/C,MAAM,OAAO,CAAC,KAAK,CAAC,4BAA4B,CAAC;aAClD;YACD,OAAO,IAAI,yEAAmC,EAAE,CAAC;QACnD,CAAC;QACD,yCAAuB,GAAvB;;YACE,UAAI,OAAO,CAAC,KAAK,0CAAE,uBAAuB,EAAE;gBAC1C,MAAM,OAAO,CAAC,KAAK,CAAC,uBAAuB,CAAC;aAC7C;YACD,OAAO,IAAI,+DAA8B,EAAE,CAAC;QAC9C,CAAC;QACH,cAAC;IAAD,CAAC,AA/BI;AAAA,CA+BJ,CAAC","sourcesContent":["// tslint:disable no-empty\n\nimport { DiagnosticError } from '../../lib/errors';\nimport { MockAnalyserNode } from './MockAnalyserNode';\nimport { MockMediaElementAudioSourceNode } from './MockMediaElementAudioSourceNode';\nimport { MockMediaStreamAudioDestinationNode } from './MockMediaStreamAudioDestinationNode';\nimport { MockMediaStreamAudioSourceNode } from './MockMediaStreamAudioSourceNode';\n\nconst defaultMockAudioContextFactoryOptions: MockAudioContext.Options = {\n  analyserNodeOptions: MockAnalyserNode.defaultOptions,\n};\n\nexport const mockAudioContextFactory = (\n  options: MockAudioContext.Options = defaultMockAudioContextFactoryOptions,\n) => class {\n  constructor() {\n    if (options.throw?.construction) {\n      throw options.throw.construction;\n    }\n  }\n  close() {}\n  createAnalyser() {\n    if (options.throw?.createAnalyser) {\n      throw options.throw.createAnalyser;\n    }\n    return new MockAnalyserNode(options.analyserNodeOptions);\n  }\n  createMediaElementSource() {\n    if (options.throw?.createMediaElementSource) {\n      throw options.throw.createMediaElementSource;\n    }\n    return new MockMediaElementAudioSourceNode();\n  }\n  createMediaStreamDestination() {\n    if (options.throw?.createMediaStreamDestination) {\n      throw options.throw.createMediaStreamDestination;\n    }\n    return new MockMediaStreamAudioDestinationNode();\n  }\n  createMediaStreamSource() {\n    if (options.throw?.createMediaStreamSource) {\n      throw options.throw.createMediaStreamSource;\n    }\n    return new MockMediaStreamAudioSourceNode();\n  }\n};\n\nexport declare namespace MockAudioContext {\n  export interface Options {\n    analyserNodeOptions?: MockAnalyserNode.Options;\n    throw?: {\n      construction?: any;\n      createAnalyser?: any;\n      createMediaElementSource?: any;\n      createMediaStreamDestination?: any;\n      createMediaStreamSource?: any;\n    };\n  }\n}\n"]}