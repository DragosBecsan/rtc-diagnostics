{"version":3,"file":"types.js","sourceRoot":"","sources":["../../lib/types.ts"],"names":[],"mappings":"","sourcesContent":["// Typescript doesn't yet support `setSinkId`, so we want to add it to the\n// existing definition.\n/**\n * @internalapi\n */\nexport interface AudioElement extends HTMLAudioElement {\n  setSinkId?: (sinkId: string) => Promise<void>;\n  sinkId?: string;\n}\n\n/**\n * @internalapi\n * Timing measurements that provides operational milestones.\n */\nexport interface TimeMeasurement {\n  /**\n   * Number in milliseconds elapsed for this measurement.\n   */\n  duration?: number;\n\n  /**\n   * A millisecond timestamp that represents the end of a process.\n   */\n  end?: number;\n\n  /**\n   * A millisecond timestamp that represents the start of a process.\n   */\n  start: number;\n}\n\n/**\n * Helper type that allows us to mark a subset of an interface's keys as\n * required.\n * @internalapi\n */\nexport type SubsetRequired<T, K extends keyof T> = T & Required<Pick<T, K>>;\n\n/**\n * @internalapi\n * Volume statistics to track in the audio device tests.\n */\nexport interface VolumeStats {\n  /**\n   * The maximum volume value recorded during the test.\n   */\n  max?: number;\n  /**\n   * The smallest non-zero volume value encountered.\n   */\n  min?: number;\n  /**\n   * The timestamps of the recorded values. For example, the 0th indexed\n   * timestamp correlates to when the 0th indexed volume value was recorded.\n   */\n  timestamps: number[];\n  /**\n   * The recorded volume values encountered during the test.\n   */\n  values: number[];\n}\n\n/**\n * Native MediaStream Recording APIs definitions\n * @internalapi\n */\nexport namespace MediaStreamRecorder {\n  export type AudioData = any;\n  export interface DataEvent {\n    data: AudioData;\n  }\n  export interface MediaRecorder {\n    ondataavailable: Function;\n    onstop: Function;\n    start: Function;\n    stop: Function;\n  }\n}\n"]}