/// <reference types="node" />
import { EventEmitter } from 'events';
import { DiagnosticError } from '../errors';
import { NetworkInformation } from '../polyfills/NetworkInformation';
import { NetworkTiming, TimeMeasurement } from '../timing';
export declare interface NetworkTest {
    /**
     * This event is emitted when the test ends. Emits a [[NetworkTest.Report]]
     * summarizing the run time of the test.
     * @param event [[NetworkTest.Events.End]]
     * @param report The report summarizing the run time of the test.
     * @private
     */
    emit(event: NetworkTest.Events.End, report: NetworkTest.Report): boolean;
    /**
     * This event is emitted when the test encounters an error, fatal or not.
     * Emits the [[DiagnosticError]] encountered.
     * @param event [[NetworkTest.Events.Error]]
     * @param error The [[DiagnosticError]] encountered, fatal or not.
     * @private
     */
    emit(event: NetworkTest.Events.Error, error: DiagnosticError): boolean;
    /**
     * Raised upon completion of the test.
     * @param event [[NetworkTest.Events.End]]
     * @param listener A callback with a [[NetworkTest.Report]] parameter.
     * @returns This [[NetworkTest]] instance.
     * @event
     */
    on(event: NetworkTest.Events.End, listener: (report: NetworkTest.Report) => any): this;
    /**
     * Raised when the test encounters an error.
     * @param event [[NetworkTest.Events.Error]]
     * @param listener A callback with a [[DiagnosticError]] parameter.
     * @returns This [[NetworkTest]] instance.
     * @event
     */
    on(event: NetworkTest.Events.Error, listener: (error: DiagnosticError) => any): this;
}
/**
 * Runs network connectivity tests while connected to Twilio.
 * This can be used to test connectivity to different regions using either UDP or TCP protocol.
 * Region and protocol can be specified using [[NetworkTest.Options.iceServers]] option.
 */
export declare class NetworkTest extends EventEmitter {
    /**
     * The test message that is sent from one end of the [[TestCall]] to the
     * other to determine connectivity through WebRTC.
     * @private
     */
    static testMessage: string;
    /**
     * The name of the test.
     */
    static testName: 'network-connectivity';
    /**
     * Default options for the [[NetworkTest]]. These will be overwritten by any
     * option passed in the [[NetworkTest.constructor]] `options` parameter.
     */
    private static defaultOptions;
    /**
     * When the test ends, generated by a call to `Date.now` as soon as
     * [[NetworkTest._stop]] is called internally.
     */
    private _endTime;
    /**
     * Any errors that the [[NetworkTest]] encounters during its run time.
     */
    private _errors;
    /**
     * Network event time measurements.
     */
    private _networkTiming;
    /**
     * Options that have been passed to the [[NetworkTest]].
     */
    private _options;
    /**
     * The configuration to pass to [[TestCall]].
     */
    private _peerConnectionConfig;
    /**
     * When the test starts, set on construction.
     */
    private _startTime;
    /**
     * The [[TestCall]] used internally.
     */
    private _testCall;
    /**
     * Initializes the test and starts it.
     * @param options Options to pass to the constructor.
     */
    constructor(options: NetworkTest.Options);
    /**
     * Determine if the test has passed or not.
     */
    private _determinePass;
    /**
     * Adds the error to the internal list of errors that have occured, which will
     * be included in the final test report.
     * @param error
     */
    private _onError;
    /**
     * Starts the test by connecting the two [[RTCPeerConnection]] ends of the
     * [[TestCall]] and then attempting to send a message from one end to the
     * other. If this process takes
     */
    private _startTest;
    /**
     * Stop the `NetworkTest`. This performs cleanup on the [[TestCall]] and
     * emits a report for the test.
     * @param didPass Override the check. Useful when encountering a fatal error.
     */
    private _stop;
}
export declare namespace NetworkTest {
    /**
     * Default options for [[NetworkTest]]
     * @private
     */
    type DefaultOptions = Pick<Options, 'networkInformation' | 'timeoutMs'>;
    /**
     * Possible options for the [[NetworkTest]].
     */
    interface Options {
        /**
         * The array of [RTCIceServer](https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer) configurations to use.
         * You need to provide TURN server configurations to ensure that your network connectivity is tested.
         * See [Twilio's Network Traversal Service](https://www.twilio.com/stun-turn) to get TURN credentials and for specifying a region or protocol.
         */
        iceServers: RTCIceServer[];
        /**
         * A `NetworkInformation` connection. Used for mocking.
         * @private
         */
        networkInformation?: NetworkInformation;
        /**
         * A `PeerConnection` factory to be used, mainly for Mocking.
         * @private
         */
        peerConnectionFactory?: typeof RTCPeerConnection;
        /**
         * Timeout in milliseconds. This causes a [[DiagnosticError]] if the test is
         * unable to connect to the server.
         * @default 5000
         */
        timeoutMs?: number;
    }
    /**
     * Possible events that an `NetworkTest` might emit. See [[NetworkTest.on]].
     */
    enum Events {
        End = "end",
        Error = "error"
    }
    /**
     * Represents the report generated from a [[NetworkTest]].
     */
    interface Report {
        /**
         * Whether or not the test passed. This is `false` if there are errors that occurred during the test.
         */
        didPass: boolean;
        /**
         * The effective bandwidth estimate in megabits per second, rounded to the nearest multiple of 25 kilobits per seconds.
         * Please see [NetworkInformation.downlink API](https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/downlink).
         */
        downlink?: number;
        /**
         * The maximum downlink speed, in megabits per second (Mbps), for the underlying connection technology.
         * Please see [NetworkInformation.downlinkMax API](https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/downlinkMax).
         */
        downlinkMax?: number;
        /**
         * The effective type of the connection meaning one of 'slow-2g', '2g', '3g', or '4g'.
         * Please see [NetworkInformation.effectiveType API](https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/effectiveType).
         */
        effectiveType?: string;
        /**
         * Any errors that occurred during the test.
         */
        errors: DiagnosticError[];
        /**
         * Network related time measurements.
         */
        networkTiming: NetworkTiming;
        /**
         * The estimated effective round-trip time of the current connection, rounded to the nearest multiple of 25 milliseconds.
         * Please see [NetworkInformation.rtt API](https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/rtt).
         */
        rtt?: number;
        /**
         * Returns `true` if the user has set a reduced data usage option on the user agent.
         * Please see [NetworkInformation.saveData API](https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/saveData).
         */
        saveData?: boolean;
        /**
         * The name of the test.
         */
        testName: typeof NetworkTest.testName;
        /**
         * Time measurements of test run time.
         */
        testTiming: TimeMeasurement;
        /**
         * The type of connection a device is using to communicate with the network.
         * Please see [NetworkInformation.type API](https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/type).
         */
        type?: string;
    }
}
/**
 * Test network connectivity to Twilio
 * @param options
 */
export declare function testNetwork(options: NetworkTest.Options): NetworkTest;
