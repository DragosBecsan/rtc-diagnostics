{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/recorder/encoder/index.ts"],"names":[],"mappings":";;AAAA,6CAAiD;AACjD,mCAAuC;AAEvC;;;;GAIG;AACH;IAgBE;;;;;OAKG;IACH,iBAAY,MAAmB,EAAE,YAA0B,EAAE,YAA+B;QAA/B,6BAAA,EAAA,eAAoB,oBAAW;QAM5F;;;WAGG;QACH,oBAAe,GAAa,cAAM,OAAA,SAAS,EAAT,CAAS,CAAC;QAE5C;;;WAGG;QACH,WAAM,GAAa,cAAM,OAAA,SAAS,EAAT,CAAS,CAAC;QAfjC,IAAI,CAAC,QAAQ,GAAG,YAAY,CAAC,YAAY,CAAC,CAAC;QAC3C,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QAClC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IACxB,CAAC;IAcD;;OAEG;IACH,uBAAK,GAAL;;QAAA,iBAQC;QAPC,IAAM,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,uBAAuB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACrE,IAAM,SAAS,GAAG,CAAA,KAAA,IAAI,CAAC,aAAa,CAAA,CAAC,qBAAqB,WAAI,0BAAc,CAAC,CAAC;QAE9E,SAAS,CAAC,cAAc,GAAG,UAAC,CAAC,IAAK,OAAA,KAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,EAAtE,CAAsE,CAAC;QAEzG,GAAG,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QACvB,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;IACpD,CAAC;IAED;;OAEG;IACH,sBAAI,GAAJ;QAAA,iBAMC;QALC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,SAAS,EAAE,UAAA,CAAC;YACzC,KAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YACxB,KAAI,CAAC,MAAM,EAAE,CAAC;QAChB,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC,CAAC;IACrE,CAAC;IACH,cAAC;AAAD,CAAC,AA/DD,IA+DC;AA/DY,0BAAO;AAiEpB;;;GAGG;AACH,SAAS,YAAY,CAAC,EAAY;IAChC,OAAO,IAAI,MAAM,CAAC,GAAG,CAAC,eAAe,CAAC,IAAI,IAAI,CAAC,CAAC,EAAE;aAC/C,QAAQ,EAAE;aACV,OAAO,CAAC,kCAAkC,EAAE,EAAE,CAAC;aAC/C,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3B,CAAC","sourcesContent":["import { ENCODER_PARAMS } from '../../constants';\nimport { waveEncoder } from './worker';\n\n/**\n * The [[Encoder]] reads audio data via an AudioContext and encodes it to a wav data format.\n * The wav data can be then converted into a blob which can be used for playback.\n * @internalapi\n */\nexport class Encoder {\n  /**\n   * The AudioContext instance to use for processing audio data\n   */\n  private _audioContext: AudioContext;\n\n  /**\n   * A Web Worker instance which handles encoding of raw data into wav\n   */\n  private _encoder: Worker;\n\n  /**\n   * The input MediaStream to record\n   */\n  private _stream: MediaStream;\n\n  /**\n   * Construct an [[Encoder]] instance and and prepares the Web Worker\n   * @constructor\n   * @param stream - The input MediaStream to record\n   * @param audioContext - The AudioContext instance to use for processing audio data\n   */\n  constructor(stream: MediaStream, audioContext: AudioContext, audioEncoder: any = waveEncoder) {\n    this._encoder = createWorker(audioEncoder);\n    this._audioContext = audioContext;\n    this._stream = stream;\n  }\n\n  /**\n   * Called when raw data is available\n   * @override\n   */\n  ondataavailable: Function = () => undefined;\n\n  /**\n   * Called when encoding stops\n   * @override\n   */\n  onstop: Function = () => undefined;\n\n  /**\n   * Starts the encoding process\n   */\n  start(): void {\n    const src = this._audioContext.createMediaStreamSource(this._stream);\n    const processor = this._audioContext.createScriptProcessor(...ENCODER_PARAMS);\n\n    processor.onaudioprocess = (e) => this._encoder.postMessage(['encode', e.inputBuffer.getChannelData(0)]);\n\n    src.connect(processor);\n    processor.connect(this._audioContext.destination);\n  }\n\n  /**\n   * Stops the encoding process\n   */\n  stop(): void {\n    this._encoder.addEventListener('message', e => {\n      this.ondataavailable(e);\n      this.onstop();\n    });\n    this._encoder.postMessage(['dump', this._audioContext.sampleRate]);\n  }\n}\n\n/**\n * Creates a worker from a js function\n * @internalapi\n */\nfunction createWorker(fn: Function) {\n  return new Worker(URL.createObjectURL(new Blob([fn\n    .toString()\n    .replace(/^(\\(\\)\\s*=>|function\\s*\\(\\))\\s*{/, '')\n    .replace(/}$/, '')])));\n}\n"]}