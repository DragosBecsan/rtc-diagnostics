{"version":3,"file":"candidate.js","sourceRoot":"","sources":["../../../lib/utils/candidate.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4DA;;;;;GAKG;AACH,SAAsB,6BAA6B,CAAC,cAAiC;;;;;wBACpE,qBAAM,cAAc,CAAC,QAAQ,EAAE,EAAA;;oBAAxC,MAAM,GAAG,SAAwD;oBACjE,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,MAAM,CAAC,UAAC,MAAM,EAAE,IAAI;wBAClE,QAAQ,IAAI,CAAC,IAAI,EAAE;4BACjB,KAAK,gBAAgB;gCACnB,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gCACjC,MAAM;4BACR,KAAK,iBAAiB;gCACpB,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gCAClC,MAAM;4BACR,KAAK,kBAAkB;gCACrB,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gCACnC,MAAM;4BACR,KAAK,WAAW;gCACd,+EAA+E;gCAC/E,IAAI,IAAI,CAAC,uBAAuB,EAAE;oCAChC,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC;iCACzB;gCACD,MAAM;yBACT;wBACD,OAAO,MAAM,CAAC;oBAChB,CAAC,EAAE,EAAE,cAAc,EAAE,EAAE,EAAE,eAAe,EAAE,EAAE,EAAE,gBAAgB,EAAE,EAAE,EAA2C,CAAC,CAAC;oBAEzG,cAAc,GAAG,WAAW,CAAC,cAA4B,CAAC;oBAC1D,eAAe,GAAG,WAAW,CAAC,eAA6B,CAAC;oBAC5D,gBAAgB,GAAG,WAAW,CAAC,gBAA8B,CAAC;oBAC9D,SAAS,GAAG,WAAW,CAAC,SAAqB,CAAC;oBAI9C,2BAA2B,GAAG,cAAc,CAAC,IAAI,CAAC,UAAA,IAAI;wBAC1D,UAAU;wBACV,OAAA,IAAI,CAAC,QAAQ;4BACb,qBAAqB;4BACrB,CAAC,SAAS,IAAI,IAAI,CAAC,EAAE,KAAK,SAAS,CAAC,uBAAuB,CAAC;oBAF5D,CAE4D,CAC7D,CAAC;oBAGF,IAAI,2BAA2B,EAAE;wBAC/B,6BAA6B,GAAG;4BAC9B,cAAc,EAAE,eAAe,CAAC,IAAI,CAAC,UAAA,SAAS,IAAI,OAAA,SAAS,CAAC,EAAE,KAAK,2BAA2B,CAAC,gBAAgB,EAA7D,CAA6D,CAAC;4BAChH,eAAe,EAAE,gBAAgB,CAAC,IAAI,CAAC,UAAA,SAAS,IAAI,OAAA,SAAS,CAAC,EAAE,KAAK,2BAA2B,CAAC,iBAAiB,EAA9D,CAA8D,CAAC;yBACpH,CAAC;qBACH;oBAED,sBAAO;4BACL,iBAAiB,iBAAM,eAAe,EAAK,gBAAgB,CAAC;4BAC5D,6BAA6B,+BAAA;yBACA,EAAC;;;;CACjC;AAjDD,sEAiDC","sourcesContent":["/**\n * The WebRTC API's [RTCIceCandidateStats](https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidateStats)\n * dictionary which provides information related to an ICE candidate.\n */\nexport interface RTCIceCandidateStats {\n  [key: string]: any;\n}\n\n/**\n * Represents the WebRTC stats for the ICE candidate pair used to connect to media, if candidates were selected.\n */\nexport interface RTCSelectedIceCandidatePairStats {\n  /**\n   * An [RTCIceCandidateStats](https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidateStats)\n   * object which provides information related to the selected local ICE candidate.\n   */\n  localCandidate: RTCIceCandidateStats;\n\n  /**\n   * An [RTCIceCandidateStats](https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidateStats)\n   * object which provides information related to the selected remote ICE candidate.\n   */\n  remoteCandidate: RTCIceCandidateStats;\n}\n\n/**\n * A WebRTC stats report containing relevant information about selected and gathered ICE candidates.\n */\nexport interface RTCIceCandidateStatsReport {\n  /**\n   * An array of WebRTC stats for the ICE candidates gathered when connecting to media.\n   */\n  iceCandidateStats: RTCIceCandidateStats[];\n\n  /**\n   * A WebRTC stats for the ICE candidate pair used to connect to media, if candidates were selected.\n   */\n  selectedIceCandidatePairStats?: RTCSelectedIceCandidatePairStats;\n}\n\n/**\n * The RTCStats dictionary is the basic statistics object used by WebRTC's statistics monitoring model,\n * providing the properties required of all statistics data objects.\n * See [RTCStats](https://developer.mozilla.org/en-US/docs/Web/API/RTCStats)\n */\nexport interface RTCStats {\n  [key: string]: any;\n\n  /**\n   * Uniquely identifies the stats object\n   */\n  id: string;\n\n  /**\n   * Indicates the type of statistics the object contains,\n   * taken from the enum type [RTCStatsType](https://developer.mozilla.org/en-US/docs/Web/API/RTCStatsType).\n   */\n  type: string;\n}\n\n/**\n * @internalapi\n * Generate a WebRTC stats report containing relevant information about ICE candidates for\n * the given [PeerConnection](https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection)\n * @param peerConnection\n */\nexport async function getRTCIceCandidateStatsReport(peerConnection: RTCPeerConnection): Promise<RTCIceCandidateStatsReport> {\n  const report = await peerConnection.getStats() as Map<string, RTCStats>;\n  const statsArrays = Array.from(report.values()).reduce((result, stat) => {\n    switch (stat.type) {\n      case 'candidate-pair':\n        result.candidatePairs.push(stat);\n        break;\n      case 'local-candidate':\n        result.localCandidates.push(stat);\n        break;\n      case 'remote-candidate':\n        result.remoteCandidates.push(stat);\n        break;\n      case 'transport':\n        // This transport is the one being used if selectedCandidatePairId is populated\n        if (stat.selectedCandidatePairId) {\n          result.transport = stat;\n        }\n        break;\n    }\n    return result;\n  }, { candidatePairs: [], localCandidates: [], remoteCandidates: [] } as Record<string, RTCStats[] | RTCStats>);\n\n  const candidatePairs = statsArrays.candidatePairs as RTCStats[];\n  const localCandidates = statsArrays.localCandidates as RTCStats[];\n  const remoteCandidates = statsArrays.remoteCandidates as RTCStats[];\n  const transport = statsArrays.transport as RTCStats;\n\n  // This is a report containing information about the selected candidates, such as IDs\n  // This is coming from WebRTC stats directly and doesn't contain the actual ICE Candidates info\n  const selectedCandidatePairReport = candidatePairs.find(pair =>\n    // Firefox\n    pair.selected ||\n    // Spec-compliant way\n    (transport && pair.id === transport.selectedCandidatePairId),\n  );\n\n  let selectedIceCandidatePairStats;\n  if (selectedCandidatePairReport) {\n    selectedIceCandidatePairStats = {\n      localCandidate: localCandidates.find(candidate => candidate.id === selectedCandidatePairReport.localCandidateId),\n      remoteCandidate: remoteCandidates.find(candidate => candidate.id === selectedCandidatePairReport.remoteCandidateId),\n    };\n  }\n\n  return {\n    iceCandidateStats: [...localCandidates, ...remoteCandidates],\n    selectedIceCandidatePairStats,\n  } as RTCIceCandidateStatsReport;\n}\n"]}