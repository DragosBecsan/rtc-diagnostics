{"version":3,"file":"DiagnosticError.js","sourceRoot":"","sources":["../../../lib/errors/DiagnosticError.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,0CAAyC;AAEzC;;;GAGG;AACH;IAAqC,mCAAK;IAiBxC;;;;OAIG;IACH,yBAAY,QAAkC,EAAE,OAAgB;QAAhE,YACE,kBAAM,OAAO,CAAC,SAOf;QANC,KAAI,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAC5B,KAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAEzB,MAAM,CAAC,cAAc,CAAC,KAAI,EAAE,eAAe,CAAC,SAAS,CAAC,CAAC;QAEvD,KAAI,CAAC,IAAI,GAAG,qBAAS,CAAC,eAAe,CAAC;;IACxC,CAAC;IACH,sBAAC;AAAD,CAAC,AA/BD,CAAqC,KAAK,GA+BzC;AA/BY,0CAAe","sourcesContent":["import { ErrorName } from '../constants';\n\n/**\n * @internalapi\n * Generic Diagnostic SDK error that provides a superclass for all other errors.\n */\nexport class DiagnosticError extends Error {\n  /**\n   * The associated `DOMError` that caused this `DiagnosticError`.\n   */\n  domError: DOMError | DOMException | undefined;\n  /**\n   * The name of the error.\n   *\n   * This overrides the typing of the `Error.name` superclass member from\n   * `string` to the specific enumeration of error names.\n   */\n  name: ErrorName;\n  /**\n   * The timestamp of the occurrence of this error.\n   */\n  timestamp: number;\n\n  /**\n   * Immediately sets the timestamp and sets the name to `DiagnosticError`.\n   * @param domError\n   * @param message\n   */\n  constructor(domError?: DOMError | DOMException, message?: string) {\n    super(message);\n    this.timestamp = Date.now();\n    this.domError = domError;\n\n    Object.setPrototypeOf(this, DiagnosticError.prototype);\n\n    this.name = ErrorName.DiagnosticError;\n  }\n}\n"]}